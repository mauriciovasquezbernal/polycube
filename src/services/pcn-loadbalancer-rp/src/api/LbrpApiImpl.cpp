/**
* lbrp API
* LoadBalancer Reverse-Proxy Service
*
* OpenAPI spec version: 2.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */


#include "LbrpApiImpl.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

namespace LbrpApiImpl {
namespace {
std::unordered_map<std::string, std::shared_ptr<Lbrp>> cubes;
std::mutex cubes_mutex;

std::shared_ptr<Lbrp> get_cube(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  auto iter = cubes.find(name);
  if (iter == cubes.end()) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }

  return iter->second;
}

}

/*
* These functions include a default basic implementation.  The user could
* extend adapt this implementation to his needs.
*/
void create_lbrp_by_id(const std::string &name, const LbrpJsonObject &jsonObject) {
  {
    // check if name is valid before creating it
    std::lock_guard<std::mutex> guard(cubes_mutex);
    if (cubes.count(name) != 0) {
      throw std::runtime_error("There is already an Cube with name " + name);
    }
  }
  auto ptr = std::make_shared<Lbrp>(name, jsonObject, jsonObject.getType());
  std::unordered_map<std::string, std::shared_ptr<Lbrp>>::iterator iter;
  bool inserted;

  std::lock_guard<std::mutex> guard(cubes_mutex);
  std::tie(iter, inserted) = cubes.emplace(name, std::move(ptr));

  if (!inserted) {
    throw std::runtime_error("There is already an Cube with name " + name);
  }
}

void replace_lbrp_by_id(const std::string &name, const LbrpJsonObject &bridge){
  throw std::runtime_error("Method not supported!");
}

void delete_lbrp_by_id(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  if (cubes.count(name) == 0) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }
  cubes.erase(name);
}

std::string read_lbrp_uuid_by_id(const std::string &name) {
  auto m = get_cube(name);
  return m->getUuid();
}

std::vector<LbrpJsonObject> read_lbrp_list_by_id() {
  std::vector<LbrpJsonObject> jsonObject_vect;
  for(auto &i : cubes) {
    auto m = get_cube(i.first);
    jsonObject_vect.push_back(m->toJsonObject());
  }
  return jsonObject_vect;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_lbrp_list_by_id_get_list() {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  for (auto &x : cubes) {
    nlohmann::fifo_map<std::string, std::string> m;
    m["name"] = x.first;
    r.push_back(std::move(m));
  }
  return r;
}

/*
* Ports list related functions
*/
void create_lbrp_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &ports) {
  auto m = get_cube(name);
  m->addPortsList(ports);
}

std::vector<PortsJsonObject> read_lbrp_ports_list_by_id(const std::string &name) {
  std::vector<PortsJsonObject> vect;
  auto m = get_cube(name);
  for (auto &i : m->getPortsList()) {
    vect.push_back(i->toJsonObject());
  }
  return vect;
}

void replace_lbrp_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &ports) {
  throw std::runtime_error("Method not supported");
}

void delete_lbrp_ports_list_by_id(const std::string &name) {
  auto m = get_cube(name);
  m->delPortsList();
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_lbrp_ports_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto m = get_cube(name);
  for(auto &i : m->getPortsList()){
    nlohmann::fifo_map<std::string, std::string> m;
    m["name"] = i->getName();
    r.push_back(std::move(m));
  }
  return r;
}

/*
* Ports related functions
*/
void create_lbrp_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &ports) {
  auto m = get_cube(name);
  return m->addPorts(portsName, ports);
}

PortsJsonObject read_lbrp_ports_by_id(const std::string &name, const std::string &portsName) {
  auto m = get_cube(name);
  return m->getPorts(portsName)->toJsonObject();
}

void replace_lbrp_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &ports) {
  auto m = get_cube(name);
  m->replacePorts(portsName, ports);
}

void delete_lbrp_ports_by_id(const std::string &name, const std::string &portsName) {
  auto m = get_cube(name);
  m->delPorts(portsName);
}

std::string read_lbrp_ports_peer_by_id(const std::string &name, const std::string &portsName) {
  auto m = get_cube(name);
  auto p = m->getPorts(portsName);
  return p->getPeer();
}

PortsStatusEnum read_lbrp_ports_status_by_id(const std::string &name, const std::string &portsName) {
  auto m = get_cube(name);
  auto p = m->getPorts(portsName);
  return p->getStatus();
}

std::string read_lbrp_ports_uuid_by_id(const std::string &name, const std::string &portsName) {
  auto m = get_cube(name);
  auto p = m->getPorts(portsName);
  return p->getUuid();
}

void update_lbrp_ports_peer_by_id(const std::string &name, const std::string &portsName, const std::string &peer) {
  auto m = get_cube(name);
  auto p = m->getPorts(portsName);
  p->setPeer(peer);
}


/**
* @brief   Create backend by ID
*
* Create operation of resource: backend*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] ip ID of ip
* @param[in] value backendbody object
*
* Responses:
*
*/
void
create_lbrp_service_backend_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const ServiceBackendJsonObject &value) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);

  service->addBackend(ip, value);
}




/**
* @brief   Create backend by ID
*
* Create operation of resource: backend*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] value backendbody object
*
* Responses:
*
*/
void
create_lbrp_service_backend_list_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::vector<ServiceBackendJsonObject> &value) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);
  service->addBackendList(value);
}


#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> create_lbrp_service_backend_list_by_id_get_list(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::vector<ServiceBackendJsonObject> &value) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&lbrp = get_cube(name);
  auto &&service = lbrp->getService(vip, vport, proto);

  auto &&backend = service->addBackendList(value);
  for(auto &i : backend) {
    r.push_back(i->getKeys());
  }
  return r;
}
#endif


/**
* @brief   Create service by ID
*
* Create operation of resource: service*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] value servicebody object
*
* Responses:
*
*/
void
create_lbrp_service_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &value) {
  auto lbrp = get_cube(name);

  lbrp->addService(vip, vport, proto, value);
}




/**
* @brief   Create service by ID
*
* Create operation of resource: service*
*
* @param[in] name ID of name
* @param[in] value servicebody object
*
* Responses:
*
*/
void
create_lbrp_service_list_by_id(const std::string &name, const std::vector<ServiceJsonObject> &value) {
  auto lbrp = get_cube(name);
  lbrp->addServiceList(value);
}


#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> create_lbrp_service_list_by_id_get_list(const std::string &name, const std::vector<ServiceJsonObject> &value) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&lbrp = get_cube(name);

  auto &&service = lbrp->addServiceList(value);
  for(auto &i : service) {
    r.push_back(i->getKeys());
  }
  return r;
}
#endif


/**
* @brief   Create src-ip-rewrite by ID
*
* Create operation of resource: src-ip-rewrite*
*
* @param[in] name ID of name
* @param[in] value src-ip-rewritebody object
*
* Responses:
*
*/
void
create_lbrp_src_ip_rewrite_by_id(const std::string &name, const SrcIpRewriteJsonObject &value) {
  auto lbrp = get_cube(name);

  lbrp->addSrcIpRewrite(value);
}




/**
* @brief   Delete backend by ID
*
* Delete operation of resource: backend*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] ip ID of ip
*
* Responses:
*
*/
void
delete_lbrp_service_backend_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);

  service->delBackend(ip);
}




/**
* @brief   Delete backend by ID
*
* Delete operation of resource: backend*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
*
* Responses:
*
*/
void
delete_lbrp_service_backend_list_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);
  service->delBackendList();
}


#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> delete_lbrp_service_backend_list_by_id_get_list(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&lbrp = get_cube(name);
  auto &&service = lbrp->getService(vip, vport, proto);

  auto &&backend = service->delBackendList();
  for(auto &i : backend) {
    r.push_back(i->getKeys());
  }
  return r;
}
#endif


/**
* @brief   Delete service by ID
*
* Delete operation of resource: service*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
*
* Responses:
*
*/
void
delete_lbrp_service_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) {
  auto lbrp = get_cube(name);

  lbrp->delService(vip, vport, proto);
}




/**
* @brief   Delete service by ID
*
* Delete operation of resource: service*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_lbrp_service_list_by_id(const std::string &name) {
  auto lbrp = get_cube(name);
  lbrp->delServiceList();
}


#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> delete_lbrp_service_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&lbrp = get_cube(name);

  auto &&service = lbrp->delServiceList();
  for(auto &i : service) {
    r.push_back(i->getKeys());
  }
  return r;
}
#endif


/**
* @brief   Delete src-ip-rewrite by ID
*
* Delete operation of resource: src-ip-rewrite*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_lbrp_src_ip_rewrite_by_id(const std::string &name) {
  auto lbrp = get_cube(name);

  lbrp->delSrcIpRewrite();
}




/**
* @brief   Read lbrp by ID
*
* Read operation of resource: lbrp*
*
* @param[in] name ID of name
*
* Responses:
* LbrpJsonObject
*/
LbrpJsonObject
read_lbrp_by_id(const std::string &name) {
  return get_cube(name)->toJsonObject();

}




/**
* @brief   Read loglevel by ID
*
* Read operation of resource: loglevel*
*
* @param[in] name ID of name
*
* Responses:
* LbrpLoglevelEnum
*/
LbrpLoglevelEnum
read_lbrp_loglevel_by_id(const std::string &name) {
  auto lbrp = get_cube(name);
  return lbrp->getLoglevel();

}




/**
* @brief   Read type by ID
*
* Read operation of resource: type*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
*
* Responses:
* PortsTypeEnum
*/
PortsTypeEnum
read_lbrp_ports_type_by_id(const std::string &name, const std::string &portsName) {
  auto lbrp = get_cube(name);
  auto ports = lbrp->getPorts(portsName);
  return ports->getType();

}




/**
* @brief   Read backend by ID
*
* Read operation of resource: backend*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] ip ID of ip
*
* Responses:
* ServiceBackendJsonObject
*/
ServiceBackendJsonObject
read_lbrp_service_backend_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);
  return service->getBackend(ip)->toJsonObject();

}




/**
* @brief   Read backend by ID
*
* Read operation of resource: backend*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
*
* Responses:
* std::vector<ServiceBackendJsonObject>
*/
std::vector<ServiceBackendJsonObject>
read_lbrp_service_backend_list_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);
  auto &&backend = service->getBackendList();
  std::vector<ServiceBackendJsonObject> m;
  for(auto &i : backend)
    m.push_back(i->toJsonObject());
  return m;
}

#define IMPLEMENT_POLYCUBE_GET_LIST

#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> read_lbrp_service_backend_list_by_id_get_list(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&lbrp = get_cube(name);
  auto &&service = lbrp->getService(vip, vport, proto);

  auto &&backend = service->getBackendList();
  for(auto &i : backend) {
    r.push_back(i->getKeys());
  }
  return r;
}
#endif

#undef IMPLEMENT_POLYCUBE_GET_LIST

/**
* @brief   Read name by ID
*
* Read operation of resource: name*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] ip ID of ip
*
* Responses:
* std::string
*/
std::string
read_lbrp_service_backend_name_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);
  auto backend = service->getBackend(ip);
  return backend->getName();

}




/**
* @brief   Read port by ID
*
* Read operation of resource: port*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] ip ID of ip
*
* Responses:
* uint16_t
*/
uint16_t
read_lbrp_service_backend_port_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);
  auto backend = service->getBackend(ip);
  return backend->getPort();

}




/**
* @brief   Read weight by ID
*
* Read operation of resource: weight*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] ip ID of ip
*
* Responses:
* uint16_t
*/
uint16_t
read_lbrp_service_backend_weight_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);
  auto backend = service->getBackend(ip);
  return backend->getWeight();

}




/**
* @brief   Read service by ID
*
* Read operation of resource: service*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
*
* Responses:
* ServiceJsonObject
*/
ServiceJsonObject
read_lbrp_service_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) {
  auto lbrp = get_cube(name);
  return lbrp->getService(vip, vport, proto)->toJsonObject();

}




/**
* @brief   Read service by ID
*
* Read operation of resource: service*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<ServiceJsonObject>
*/
std::vector<ServiceJsonObject>
read_lbrp_service_list_by_id(const std::string &name) {
  auto lbrp = get_cube(name);
  auto &&service = lbrp->getServiceList();
  std::vector<ServiceJsonObject> m;
  for(auto &i : service)
    m.push_back(i->toJsonObject());
  return m;
}

#define IMPLEMENT_POLYCUBE_GET_LIST

#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> read_lbrp_service_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&lbrp = get_cube(name);

  auto &&service = lbrp->getServiceList();
  for(auto &i : service) {
    r.push_back(i->getKeys());
  }
  return r;
}
#endif

#undef IMPLEMENT_POLYCUBE_GET_LIST

/**
* @brief   Read name by ID
*
* Read operation of resource: name*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
*
* Responses:
* std::string
*/
std::string
read_lbrp_service_name_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);
  return service->getName();

}




/**
* @brief   Read src-ip-rewrite by ID
*
* Read operation of resource: src-ip-rewrite*
*
* @param[in] name ID of name
*
* Responses:
* SrcIpRewriteJsonObject
*/
SrcIpRewriteJsonObject
read_lbrp_src_ip_rewrite_by_id(const std::string &name) {
  auto lbrp = get_cube(name);
  return lbrp->getSrcIpRewrite()->toJsonObject();

}




/**
* @brief   Read ip-range by ID
*
* Read operation of resource: ip-range*
*
* @param[in] name ID of name
*
* Responses:
* std::string
*/
std::string
read_lbrp_src_ip_rewrite_ip_range_by_id(const std::string &name) {
  auto lbrp = get_cube(name);
  auto srcIpRewrite = lbrp->getSrcIpRewrite();
  return srcIpRewrite->getIpRange();

}




/**
* @brief   Read new_ip_range by ID
*
* Read operation of resource: new_ip_range*
*
* @param[in] name ID of name
*
* Responses:
* std::string
*/
std::string
read_lbrp_src_ip_rewrite_new_ip_range_by_id(const std::string &name) {
  auto lbrp = get_cube(name);
  auto srcIpRewrite = lbrp->getSrcIpRewrite();
  return srcIpRewrite->getNewIpRange();

}




/**
* @brief   Read type by ID
*
* Read operation of resource: type*
*
* @param[in] name ID of name
*
* Responses:
* CubeType
*/
CubeType
read_lbrp_type_by_id(const std::string &name) {
  auto lbrp = get_cube(name);
  return lbrp->getType();

}




/**
* @brief   Replace backend by ID
*
* Replace operation of resource: backend*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] ip ID of ip
* @param[in] value backendbody object
*
* Responses:
*
*/
void
replace_lbrp_service_backend_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const ServiceBackendJsonObject &value) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);

  service->replaceBackend(ip, value);
}




/**
* @brief   Replace backend by ID
*
* Replace operation of resource: backend*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] value backendbody object
*
* Responses:
*
*/
void
replace_lbrp_service_backend_list_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::vector<ServiceBackendJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}


#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> replace_lbrp_service_backend_list_by_id_get_list(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::vector<ServiceBackendJsonObject> &value) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
}
#endif


/**
* @brief   Replace service by ID
*
* Replace operation of resource: service*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] value servicebody object
*
* Responses:
*
*/
void
replace_lbrp_service_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &value) {
  auto lbrp = get_cube(name);

  lbrp->replaceService(vip, vport, proto, value);
}




/**
* @brief   Replace service by ID
*
* Replace operation of resource: service*
*
* @param[in] name ID of name
* @param[in] value servicebody object
*
* Responses:
*
*/
void
replace_lbrp_service_list_by_id(const std::string &name, const std::vector<ServiceJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}


#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> replace_lbrp_service_list_by_id_get_list(const std::string &name, const std::vector<ServiceJsonObject> &value) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
}
#endif


/**
* @brief   Replace src-ip-rewrite by ID
*
* Replace operation of resource: src-ip-rewrite*
*
* @param[in] name ID of name
* @param[in] value src-ip-rewritebody object
*
* Responses:
*
*/
void
replace_lbrp_src_ip_rewrite_by_id(const std::string &name, const SrcIpRewriteJsonObject &value) {
  auto lbrp = get_cube(name);

  lbrp->replaceSrcIpRewrite(value);
}




/**
* @brief   Update lbrp by ID
*
* Update operation of resource: lbrp*
*
* @param[in] name ID of name
* @param[in] value lbrpbody object
*
* Responses:
*
*/
void
update_lbrp_by_id(const std::string &name, const LbrpJsonObject &value) {
  auto lbrp = get_cube(name);

  lbrp->update(value);
}




/**
* @brief   Update lbrp by ID
*
* Update operation of resource: lbrp*
*
* @param[in] value lbrpbody object
*
* Responses:
*
*/
void
update_lbrp_list_by_id(const std::vector<LbrpJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}


#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> update_lbrp_list_by_id_get_list(const std::vector<LbrpJsonObject> &value) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
}
#endif


/**
* @brief   Update loglevel by ID
*
* Update operation of resource: loglevel*
*
* @param[in] name ID of name
* @param[in] value Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)
*
* Responses:
*
*/
void
update_lbrp_loglevel_by_id(const std::string &name, const LbrpLoglevelEnum &value) {
  auto lbrp = get_cube(name);

  lbrp->setLoglevel(value);
}




/**
* @brief   Update ports by ID
*
* Update operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
update_lbrp_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) {
  auto lbrp = get_cube(name);
  auto ports = lbrp->getPorts(portsName);

  ports->update(value);
}




/**
* @brief   Update ports by ID
*
* Update operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
update_lbrp_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}


#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> update_lbrp_ports_list_by_id_get_list(const std::string &name, const std::vector<PortsJsonObject> &value) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
}
#endif


/**
* @brief   Update type by ID
*
* Update operation of resource: type*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value Type of the LB port (e.g. FRONTEND or BACKEND)
*
* Responses:
*
*/
void
update_lbrp_ports_type_by_id(const std::string &name, const std::string &portsName, const PortsTypeEnum &value) {
  auto lbrp = get_cube(name);
  auto ports = lbrp->getPorts(portsName);

  ports->setType(value);
}




/**
* @brief   Update backend by ID
*
* Update operation of resource: backend*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] ip ID of ip
* @param[in] value backendbody object
*
* Responses:
*
*/
void
update_lbrp_service_backend_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const ServiceBackendJsonObject &value) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);
  auto backend = service->getBackend(ip);

  backend->update(value);
}




/**
* @brief   Update backend by ID
*
* Update operation of resource: backend*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] value backendbody object
*
* Responses:
*
*/
void
update_lbrp_service_backend_list_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::vector<ServiceBackendJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}


#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> update_lbrp_service_backend_list_by_id_get_list(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::vector<ServiceBackendJsonObject> &value) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
}
#endif


/**
* @brief   Update name by ID
*
* Update operation of resource: name*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] ip ID of ip
* @param[in] value name
*
* Responses:
*
*/
void
update_lbrp_service_backend_name_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const std::string &value) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);
  auto backend = service->getBackend(ip);

  backend->setName(value);
}




/**
* @brief   Update port by ID
*
* Update operation of resource: port*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] ip ID of ip
* @param[in] value Port where the server listen to (this value is ignored in case of ICMP)
*
* Responses:
*
*/
void
update_lbrp_service_backend_port_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const uint16_t &value) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);
  auto backend = service->getBackend(ip);

  backend->setPort(value);
}




/**
* @brief   Update weight by ID
*
* Update operation of resource: weight*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] ip ID of ip
* @param[in] value Weight of the backend in the pool
*
* Responses:
*
*/
void
update_lbrp_service_backend_weight_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &ip, const uint16_t &value) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);
  auto backend = service->getBackend(ip);

  backend->setWeight(value);
}




/**
* @brief   Update service by ID
*
* Update operation of resource: service*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] value servicebody object
*
* Responses:
*
*/
void
update_lbrp_service_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &value) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);

  service->update(value);
}




/**
* @brief   Update service by ID
*
* Update operation of resource: service*
*
* @param[in] name ID of name
* @param[in] value servicebody object
*
* Responses:
*
*/
void
update_lbrp_service_list_by_id(const std::string &name, const std::vector<ServiceJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}


#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> update_lbrp_service_list_by_id_get_list(const std::string &name, const std::vector<ServiceJsonObject> &value) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
}
#endif


/**
* @brief   Update name by ID
*
* Update operation of resource: name*
*
* @param[in] name ID of name
* @param[in] vip ID of vip
* @param[in] vport ID of vport
* @param[in] proto ID of proto
* @param[in] value Service name related to the backend server of the pool is connected to
*
* Responses:
*
*/
void
update_lbrp_service_name_by_id(const std::string &name, const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const std::string &value) {
  auto lbrp = get_cube(name);
  auto service = lbrp->getService(vip, vport, proto);

  service->setName(value);
}




/**
* @brief   Update src-ip-rewrite by ID
*
* Update operation of resource: src-ip-rewrite*
*
* @param[in] name ID of name
* @param[in] value src-ip-rewritebody object
*
* Responses:
*
*/
void
update_lbrp_src_ip_rewrite_by_id(const std::string &name, const SrcIpRewriteJsonObject &value) {
  auto lbrp = get_cube(name);
  auto srcIpRewrite = lbrp->getSrcIpRewrite();

  srcIpRewrite->update(value);
}




/**
* @brief   Update ip-range by ID
*
* Update operation of resource: ip-range*
*
* @param[in] name ID of name
* @param[in] value Range of IP addresses of the clients that must be replaced
*
* Responses:
*
*/
void
update_lbrp_src_ip_rewrite_ip_range_by_id(const std::string &name, const std::string &value) {
  auto lbrp = get_cube(name);
  auto srcIpRewrite = lbrp->getSrcIpRewrite();

  srcIpRewrite->setIpRange(value);
}




/**
* @brief   Update new_ip_range by ID
*
* Update operation of resource: new_ip_range*
*
* @param[in] name ID of name
* @param[in] value Range of IP addresses of the that must be used to replace client addresses
*
* Responses:
*
*/
void
update_lbrp_src_ip_rewrite_new_ip_range_by_id(const std::string &name, const std::string &value) {
  auto lbrp = get_cube(name);
  auto srcIpRewrite = lbrp->getSrcIpRewrite();

  srcIpRewrite->setNewIpRange(value);
}




}
}
}
}
}

