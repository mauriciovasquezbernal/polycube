/**
* router API
* Router Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* RouterApiImpl.h
*
*
*/

#pragma once


#include <memory>
#include <map>
#include <mutex>
#include "../Router.h"

#include "ArpEntryJsonObject.h"
#include "PortsJsonObject.h"
#include "PortsSecondaryipJsonObject.h"
#include "RouteJsonObject.h"
#include "RouterJsonObject.h"
#include <vector>

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

namespace RouterApiImpl {
  void create_router_arp_entry_by_id(const std::string &name, const std::string &address, const ArpEntryJsonObject &value);
  void create_router_arp_entry_list_by_id(const std::string &name, const std::vector<ArpEntryJsonObject> &value);
  void create_router_by_id(const std::string &name, const RouterJsonObject &value);
  void create_router_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void create_router_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);
  void create_router_ports_secondaryip_by_id(const std::string &name, const std::string &portsName, const std::string &ip, const std::string &netmask, const PortsSecondaryipJsonObject &value);
  void create_router_ports_secondaryip_list_by_id(const std::string &name, const std::string &portsName, const std::vector<PortsSecondaryipJsonObject> &value);
  void create_router_route_by_id(const std::string &name, const std::string &network, const std::string &netmask, const std::string &nexthop, const RouteJsonObject &value);
  void create_router_route_list_by_id(const std::string &name, const std::vector<RouteJsonObject> &value);
  void delete_router_arp_entry_by_id(const std::string &name, const std::string &address);
  void delete_router_arp_entry_list_by_id(const std::string &name);
  void delete_router_by_id(const std::string &name);
  void delete_router_ports_by_id(const std::string &name, const std::string &portsName);
  void delete_router_ports_list_by_id(const std::string &name);
  void delete_router_ports_secondaryip_by_id(const std::string &name, const std::string &portsName, const std::string &ip, const std::string &netmask);
  void delete_router_ports_secondaryip_list_by_id(const std::string &name, const std::string &portsName);
  void delete_router_route_by_id(const std::string &name, const std::string &network, const std::string &netmask, const std::string &nexthop);
  void delete_router_route_list_by_id(const std::string &name);
  ArpEntryJsonObject read_router_arp_entry_by_id(const std::string &name, const std::string &address);
  std::string read_router_arp_entry_interface_by_id(const std::string &name, const std::string &address);
  std::vector<ArpEntryJsonObject> read_router_arp_entry_list_by_id(const std::string &name);
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_router_arp_entry_list_by_id_get_list(const std::string &name);
  std::string read_router_arp_entry_mac_by_id(const std::string &name, const std::string &address);
  RouterJsonObject read_router_by_id(const std::string &name);
  std::vector<RouterJsonObject> read_router_list_by_id();
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_router_list_by_id_get_list();
  RouterLoglevelEnum read_router_loglevel_by_id(const std::string &name);
  PortsJsonObject read_router_ports_by_id(const std::string &name, const std::string &portsName);
  std::string read_router_ports_ip_by_id(const std::string &name, const std::string &portsName);
  std::vector<PortsJsonObject> read_router_ports_list_by_id(const std::string &name);
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_router_ports_list_by_id_get_list(const std::string &name);
  std::string read_router_ports_mac_by_id(const std::string &name, const std::string &portsName);
  std::string read_router_ports_netmask_by_id(const std::string &name, const std::string &portsName);
  std::string read_router_ports_peer_by_id(const std::string &name, const std::string &portsName);
  PortsSecondaryipJsonObject read_router_ports_secondaryip_by_id(const std::string &name, const std::string &portsName, const std::string &ip, const std::string &netmask);
  std::vector<PortsSecondaryipJsonObject> read_router_ports_secondaryip_list_by_id(const std::string &name, const std::string &portsName);
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_router_ports_secondaryip_list_by_id_get_list(const std::string &name, const std::string &portsName);
  PortsStatusEnum read_router_ports_status_by_id(const std::string &name, const std::string &portsName);
  std::string read_router_ports_uuid_by_id(const std::string &name, const std::string &portsName);
  RouteJsonObject read_router_route_by_id(const std::string &name, const std::string &network, const std::string &netmask, const std::string &nexthop);
  std::string read_router_route_interface_by_id(const std::string &name, const std::string &network, const std::string &netmask, const std::string &nexthop);
  std::vector<RouteJsonObject> read_router_route_list_by_id(const std::string &name);
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_router_route_list_by_id_get_list(const std::string &name);
  int32_t read_router_route_pathcost_by_id(const std::string &name, const std::string &network, const std::string &netmask, const std::string &nexthop);
  CubeType read_router_type_by_id(const std::string &name);
  std::string read_router_uuid_by_id(const std::string &name);
  void replace_router_arp_entry_by_id(const std::string &name, const std::string &address, const ArpEntryJsonObject &value);
  void replace_router_arp_entry_list_by_id(const std::string &name, const std::vector<ArpEntryJsonObject> &value);
  void replace_router_by_id(const std::string &name, const RouterJsonObject &value);
  void replace_router_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void replace_router_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);
  void replace_router_ports_secondaryip_by_id(const std::string &name, const std::string &portsName, const std::string &ip, const std::string &netmask, const PortsSecondaryipJsonObject &value);
  void replace_router_ports_secondaryip_list_by_id(const std::string &name, const std::string &portsName, const std::vector<PortsSecondaryipJsonObject> &value);
  void replace_router_route_by_id(const std::string &name, const std::string &network, const std::string &netmask, const std::string &nexthop, const RouteJsonObject &value);
  void replace_router_route_list_by_id(const std::string &name, const std::vector<RouteJsonObject> &value);
  void update_router_arp_entry_by_id(const std::string &name, const std::string &address, const ArpEntryJsonObject &value);
  void update_router_arp_entry_interface_by_id(const std::string &name, const std::string &address, const std::string &value);
  void update_router_arp_entry_list_by_id(const std::string &name, const std::vector<ArpEntryJsonObject> &value);
  void update_router_arp_entry_mac_by_id(const std::string &name, const std::string &address, const std::string &value);
  void update_router_by_id(const std::string &name, const RouterJsonObject &value);
  void update_router_list_by_id(const std::vector<RouterJsonObject> &value);
  void update_router_loglevel_by_id(const std::string &name, const RouterLoglevelEnum &value);
  void update_router_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void update_router_ports_ip_by_id(const std::string &name, const std::string &portsName, const std::string &value);
  void update_router_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);
  void update_router_ports_mac_by_id(const std::string &name, const std::string &portsName, const std::string &value);
  void update_router_ports_netmask_by_id(const std::string &name, const std::string &portsName, const std::string &value);
  void update_router_ports_peer_by_id(const std::string &name, const std::string &portsName, const std::string &value);
  void update_router_ports_secondaryip_by_id(const std::string &name, const std::string &portsName, const std::string &ip, const std::string &netmask, const PortsSecondaryipJsonObject &value);
  void update_router_ports_secondaryip_list_by_id(const std::string &name, const std::string &portsName, const std::vector<PortsSecondaryipJsonObject> &value);
  void update_router_route_by_id(const std::string &name, const std::string &network, const std::string &netmask, const std::string &nexthop, const RouteJsonObject &value);
  void update_router_route_list_by_id(const std::string &name, const std::vector<RouteJsonObject> &value);
  void update_router_route_pathcost_by_id(const std::string &name, const std::string &network, const std::string &netmask, const std::string &nexthop, const int32_t &value);
}
}
}
}
}

