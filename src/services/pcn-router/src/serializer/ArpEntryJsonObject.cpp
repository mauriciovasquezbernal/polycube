/**
* router API
* Router Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "ArpEntryJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

ArpEntryJsonObject::ArpEntryJsonObject() :
  m_addressIsSet (false),
  m_macIsSet (false),
  m_interfaceIsSet (false) { }

ArpEntryJsonObject::ArpEntryJsonObject(nlohmann::json& val) :
  m_addressIsSet (false),
  // Mandatory item
  m_mac (val.at("mac").get<std::string>()),
  m_macIsSet (true),
  // Mandatory item
  m_interface (val.at("interface").get<std::string>()),
  m_interfaceIsSet (true) {


}

nlohmann::json ArpEntryJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  val["address"] = m_address;
  val["mac"] = m_mac;
  val["interface"] = m_interface;

  return val;
}

nlohmann::json ArpEntryJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["address"]["name"] = "address";
  val["address"]["type"] = "key";
  val["address"]["simpletype"] = "string";
  val["address"]["description"] = R"POLYCUBE(Destination IP address)POLYCUBE";
  val["address"]["example"] = R"POLYCUBE(123.13.34.0)POLYCUBE";

  return val;
}

nlohmann::json ArpEntryJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["mac"]["name"] = "mac";
  val["mac"]["type"] = "leaf"; // Suppose that type is leaf
  val["mac"]["simpletype"] = "string";
  val["mac"]["description"] = R"POLYCUBE(Destination MAC address)POLYCUBE";
  val["mac"]["example"] = R"POLYCUBE(C5:13:2D:36:27:9B)POLYCUBE";
  val["interface"]["name"] = "interface";
  val["interface"]["type"] = "leaf"; // Suppose that type is leaf
  val["interface"]["simpletype"] = "string";
  val["interface"]["description"] = R"POLYCUBE(Outgoing interface)POLYCUBE";
  val["interface"]["example"] = R"POLYCUBE(port2)POLYCUBE";

  return val;
}

nlohmann::json ArpEntryJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["mac"]["name"] = "mac";
  val["mac"]["simpletype"] = "string";
  val["mac"]["description"] = R"POLYCUBE(Destination MAC address)POLYCUBE";
  val["mac"]["example"] = R"POLYCUBE(C5:13:2D:36:27:9B)POLYCUBE";
  val["interface"]["name"] = "interface";
  val["interface"]["simpletype"] = "string";
  val["interface"]["description"] = R"POLYCUBE(Outgoing interface)POLYCUBE";
  val["interface"]["example"] = R"POLYCUBE(port2)POLYCUBE";

  return val;
}

nlohmann::json ArpEntryJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> ArpEntryJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

std::string ArpEntryJsonObject::getAddress() const {
  return m_address;
}

void ArpEntryJsonObject::setAddress(std::string value) {
  m_address = value;
  m_addressIsSet = true;
}

bool ArpEntryJsonObject::addressIsSet() const {
  return m_addressIsSet;
}





std::string ArpEntryJsonObject::getMac() const {
  return m_mac;
}

void ArpEntryJsonObject::setMac(std::string value) {
  m_mac = value;
  m_macIsSet = true;
}

bool ArpEntryJsonObject::macIsSet() const {
  return m_macIsSet;
}





std::string ArpEntryJsonObject::getInterface() const {
  return m_interface;
}

void ArpEntryJsonObject::setInterface(std::string value) {
  m_interface = value;
  m_interfaceIsSet = true;
}

bool ArpEntryJsonObject::interfaceIsSet() const {
  return m_interfaceIsSet;
}






}
}
}
}


