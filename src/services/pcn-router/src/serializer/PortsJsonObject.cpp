/**
* router API
* router API generated from router.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "PortsJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

PortsJsonObject::PortsJsonObject() {
  m_nameIsSet = false;
  m_ipIsSet = false;
  m_netmaskIsSet = false;
  m_secondaryipIsSet = false;
  m_macIsSet = false;
}

PortsJsonObject::PortsJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_ipIsSet = false;
  m_netmaskIsSet = false;
  m_secondaryipIsSet = false;
  m_macIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("ip")) {
    setIp(val.at("ip").get<std::string>());
  }

  if (val.count("netmask")) {
    setNetmask(val.at("netmask").get<std::string>());
  }

  if (val.count("secondaryip")) {
    for (auto& item : val["secondaryip"]) {
      PortsSecondaryipJsonObject newItem{ item };
      m_secondaryip.push_back(newItem);
    }

    m_secondaryipIsSet = true;
  }

  if (val.count("mac")) {
    setMac(val.at("mac").get<std::string>());
  }
}

nlohmann::json PortsJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_ipIsSet) {
    val["ip"] = m_ip;
  }

  if (m_netmaskIsSet) {
    val["netmask"] = m_netmask;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_secondaryip) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["secondaryip"] = jsonArray;
    }
  }

  if (m_macIsSet) {
    val["mac"] = m_mac;
  }

  return val;
}

std::string PortsJsonObject::getName() const {
  return m_name;
}

void PortsJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool PortsJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



std::string PortsJsonObject::getIp() const {
  return m_ip;
}

void PortsJsonObject::setIp(std::string value) {
  m_ip = value;
  m_ipIsSet = true;
}

bool PortsJsonObject::ipIsSet() const {
  return m_ipIsSet;
}



std::string PortsJsonObject::getNetmask() const {
  return m_netmask;
}

void PortsJsonObject::setNetmask(std::string value) {
  m_netmask = value;
  m_netmaskIsSet = true;
}

bool PortsJsonObject::netmaskIsSet() const {
  return m_netmaskIsSet;
}



const std::vector<PortsSecondaryipJsonObject>& PortsJsonObject::getSecondaryip() const{
  return m_secondaryip;
}

void PortsJsonObject::addPortsSecondaryip(PortsSecondaryipJsonObject value) {
  m_secondaryip.push_back(value);
  m_secondaryipIsSet = true;
}


bool PortsJsonObject::secondaryipIsSet() const {
  return m_secondaryipIsSet;
}

void PortsJsonObject::unsetSecondaryip() {
  m_secondaryipIsSet = false;
}

std::string PortsJsonObject::getMac() const {
  return m_mac;
}

void PortsJsonObject::setMac(std::string value) {
  m_mac = value;
  m_macIsSet = true;
}

bool PortsJsonObject::macIsSet() const {
  return m_macIsSet;
}

void PortsJsonObject::unsetMac() {
  m_macIsSet = false;
}


nlohmann::json PortsJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["name"]["name"] = "name";
  val["name"]["type"] = "key";
  val["name"]["simpletype"] = "string";
  val["name"]["description"] = R"POLYCUBE(Port Name)POLYCUBE";
  val["name"]["example"] = R"POLYCUBE(port1)POLYCUBE";

  return val;
}

nlohmann::json PortsJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["uuid"]["name"] = "uuid";
  val["uuid"]["type"] = "leaf"; // Suppose that type is leaf
  val["uuid"]["simpletype"] = "string";
  val["uuid"]["description"] = R"POLYCUBE(UUID of the port)POLYCUBE";
  val["uuid"]["example"] = R"POLYCUBE()POLYCUBE";
  val["status"]["name"] = "status";
  val["status"]["type"] = "leaf"; // Suppose that type is leaf
  val["status"]["simpletype"] = "string";
  val["status"]["description"] = R"POLYCUBE(Status of the port (UP or DOWN))POLYCUBE";
  val["status"]["example"] = R"POLYCUBE()POLYCUBE";
  val["peer"]["name"] = "peer";
  val["peer"]["type"] = "leaf"; // Suppose that type is leaf
  val["peer"]["simpletype"] = "string";
  val["peer"]["description"] = R"POLYCUBE(Peer name, such as a network interfaces (e.g., 'veth0') or another cube (e.g., 'br1:port2'))POLYCUBE";
  val["peer"]["example"] = R"POLYCUBE(r0:port1)POLYCUBE";
  val["ip"]["name"] = "ip";
  val["ip"]["type"] = "leaf"; // Suppose that type is leaf
  val["ip"]["simpletype"] = "string";
  val["ip"]["description"] = R"POLYCUBE(IP address of the port)POLYCUBE";
  val["ip"]["example"] = R"POLYCUBE(207.46.130.1)POLYCUBE";
  val["netmask"]["name"] = "netmask";
  val["netmask"]["type"] = "leaf"; // Suppose that type is leaf
  val["netmask"]["simpletype"] = "string";
  val["netmask"]["description"] = R"POLYCUBE(Netmask of the port)POLYCUBE";
  val["netmask"]["example"] = R"POLYCUBE(255.255.255.0)POLYCUBE";
  val["secondaryip"]["name"] = "secondaryip";
  val["secondaryip"]["type"] = "leaf"; // Suppose that type is leaf
  val["secondaryip"]["type"] = "list";
  val["secondaryip"]["description"] = R"POLYCUBE(Secondary IP address for the port)POLYCUBE";
  val["secondaryip"]["example"] = R"POLYCUBE()POLYCUBE";
  val["mac"]["name"] = "mac";
  val["mac"]["type"] = "leaf"; // Suppose that type is leaf
  val["mac"]["simpletype"] = "string";
  val["mac"]["description"] = R"POLYCUBE(MAC address of the port)POLYCUBE";
  val["mac"]["example"] = R"POLYCUBE(B3:23:45:F5:3A)POLYCUBE";

  return val;
}

nlohmann::json PortsJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["peer"]["name"] = "peer";
  val["peer"]["simpletype"] = "string";
  val["peer"]["description"] = R"POLYCUBE(Peer name, such as a network interfaces (e.g., 'veth0') or another cube (e.g., 'br1:port2'))POLYCUBE";
  val["peer"]["example"] = R"POLYCUBE(r0:port1)POLYCUBE";
  val["ip"]["name"] = "ip";
  val["ip"]["simpletype"] = "string";
  val["ip"]["description"] = R"POLYCUBE(IP address of the port)POLYCUBE";
  val["ip"]["example"] = R"POLYCUBE(207.46.130.1)POLYCUBE";
  val["netmask"]["name"] = "netmask";
  val["netmask"]["simpletype"] = "string";
  val["netmask"]["description"] = R"POLYCUBE(Netmask of the port)POLYCUBE";
  val["netmask"]["example"] = R"POLYCUBE(255.255.255.0)POLYCUBE";
  val["mac"]["name"] = "mac";
  val["mac"]["simpletype"] = "string";
  val["mac"]["description"] = R"POLYCUBE(MAC address of the port)POLYCUBE";
  val["mac"]["example"] = R"POLYCUBE(B3:23:45:F5:3A)POLYCUBE";

  return val;
}

nlohmann::json PortsJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();

  val["secondaryip"]["name"] = "secondaryip";
  val["secondaryip"]["type"] = "list";
  val["secondaryip"]["description"] = R"POLYCUBE(Secondary IP address for the port)POLYCUBE";
  val["secondaryip"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

std::vector<std::string> PortsJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

}
}
}
}

