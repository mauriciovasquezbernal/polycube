/**
* firewall API
* Firewall Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* SessionTableJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace io {
namespace swagger {
namespace server {
namespace model {


/// <summary>
///
/// </summary>
class  SessionTableJsonObject : public JsonObjectBase {
public:
  SessionTableJsonObject();
  SessionTableJsonObject(nlohmann::json& json);
  ~SessionTableJsonObject() final = default;

  /////////////////////////////////////////////
  /// JsonObjectBase overrides

  nlohmann::json toJson() const final;

  static nlohmann::json helpKeys();
  static nlohmann::json helpElements();
  static nlohmann::json helpWritableLeafs();
  static nlohmann::json helpComplexElements();
  static std::vector<std::string> helpActions();
  /////////////////////////////////////////////
  /// SessionTableJsonObject members

  /// <summary>
  /// Source IP
  /// </summary>
  std::string getSrc() const;
  void setSrc(std::string value);
  bool srcIsSet() const;
  void unsetSrc();

  /// <summary>
  /// Destination IP
  /// </summary>
  std::string getDst() const;
  void setDst(std::string value);
  bool dstIsSet() const;
  void unsetDst();

  /// <summary>
  /// Level 4 Protocol.
  /// </summary>
  std::string getL4proto() const;
  void setL4proto(std::string value);
  bool l4protoIsSet() const;
  void unsetL4proto();

  /// <summary>
  /// Source Port
  /// </summary>
  uint16_t getSport() const;
  void setSport(uint16_t value);
  bool sportIsSet() const;
  void unsetSport();

  /// <summary>
  /// Destination
  /// </summary>
  uint16_t getDport() const;
  void setDport(uint16_t value);
  bool dportIsSet() const;
  void unsetDport();

  /// <summary>
  /// Connection state.
  /// </summary>
  std::string getState() const;
  void setState(std::string value);
  bool stateIsSet() const;
  void unsetState();

  /// <summary>
  /// Last packet matching the connection
  /// </summary>
  uint32_t getEta() const;
  void setEta(uint32_t value);
  bool etaIsSet() const;
  void unsetEta();


private:
  std::string m_src;
  bool m_srcIsSet;
  std::string m_dst;
  bool m_dstIsSet;
  std::string m_l4proto;
  bool m_l4protoIsSet;
  uint16_t m_sport;
  bool m_sportIsSet;
  uint16_t m_dport;
  bool m_dportIsSet;
  std::string m_state;
  bool m_stateIsSet;
  uint32_t m_eta;
  bool m_etaIsSet;
};

}
}
}
}

