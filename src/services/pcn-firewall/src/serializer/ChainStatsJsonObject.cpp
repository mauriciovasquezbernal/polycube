/**
* firewall API
* Firewall Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "ChainStatsJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

ChainStatsJsonObject::ChainStatsJsonObject() :
  m_idIsSet (false),
  m_pktsIsSet (false),
  m_bytesIsSet (false),
  m_srcIsSet (false),
  m_dstIsSet (false),
  m_l4protoIsSet (false),
  m_sportIsSet (false),
  m_dportIsSet (false),
  m_tcpflagsIsSet (false),
  m_conntrackIsSet (false),
  m_actionIsSet (false),
  m_descriptionIsSet (false) { }

ChainStatsJsonObject::ChainStatsJsonObject(nlohmann::json& val) :
  m_idIsSet (false),
  m_pktsIsSet (false),
  m_bytesIsSet (false),
  m_srcIsSet (false),
  m_dstIsSet (false),
  m_l4protoIsSet (false),
  m_sportIsSet (false),
  m_dportIsSet (false),
  m_tcpflagsIsSet (false),
  m_conntrackIsSet (false),
  m_actionIsSet (false),
  m_descriptionIsSet (false) {

  if (val.count("pkts") != 0) {
    setPkts(val.at("pkts").get<uint64_t>());
  }

  if (val.count("bytes") != 0) {
    setBytes(val.at("bytes").get<uint64_t>());
  }

  if (val.count("src") != 0) {
    setSrc(val.at("src").get<std::string>());
  }

  if (val.count("dst") != 0) {
    setDst(val.at("dst").get<std::string>());
  }

  if (val.count("l4proto") != 0) {
    setL4proto(val.at("l4proto").get<std::string>());
  }

  if (val.count("sport") != 0) {
    setSport(val.at("sport").get<uint16_t>());
  }

  if (val.count("dport") != 0) {
    setDport(val.at("dport").get<uint16_t>());
  }

  if (val.count("tcpflags") != 0) {
    setTcpflags(val.at("tcpflags").get<std::string>());
  }

  if (val.count("conntrack") != 0) {
    setConntrack(string_to_ConntrackstatusEnum(val.at("conntrack").get<std::string>()));
  }

  if (val.count("action") != 0) {
    setAction(string_to_ActionEnum(val.at("action").get<std::string>()));
  }

  if (val.count("description") != 0) {
    setDescription(val.at("description").get<std::string>());
  }
}

nlohmann::json ChainStatsJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  val["id"] = m_id;
  if (m_pktsIsSet) {
    val["pkts"] = m_pkts;
  }

  if (m_bytesIsSet) {
    val["bytes"] = m_bytes;
  }

  if (m_srcIsSet) {
    val["src"] = m_src;
  }

  if (m_dstIsSet) {
    val["dst"] = m_dst;
  }

  if (m_l4protoIsSet) {
    val["l4proto"] = m_l4proto;
  }

  if (m_sportIsSet) {
    val["sport"] = m_sport;
  }

  if (m_dportIsSet) {
    val["dport"] = m_dport;
  }

  if (m_tcpflagsIsSet) {
    val["tcpflags"] = m_tcpflags;
  }

  if (m_conntrackIsSet) {
    val["conntrack"] = ConntrackstatusEnum_to_string(m_conntrack);
  }

  if (m_actionIsSet) {
    val["action"] = ActionEnum_to_string(m_action);
  }

  if (m_descriptionIsSet) {
    val["description"] = m_description;
  }


  return val;
}

nlohmann::json ChainStatsJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["id"]["name"] = "id";
  val["id"]["type"] = "key";
  val["id"]["simpletype"] = "integer";
  val["id"]["description"] = R"POLYCUBE(Rule Identifier)POLYCUBE";
  val["id"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json ChainStatsJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["pkts"]["name"] = "pkts";
  val["pkts"]["type"] = "leaf"; // Suppose that type is leaf
  val["pkts"]["simpletype"] = "integer";
  val["pkts"]["description"] = R"POLYCUBE(Number of packets matching the rule)POLYCUBE";
  val["pkts"]["example"] = R"POLYCUBE()POLYCUBE";
  val["bytes"]["name"] = "bytes";
  val["bytes"]["type"] = "leaf"; // Suppose that type is leaf
  val["bytes"]["simpletype"] = "integer";
  val["bytes"]["description"] = R"POLYCUBE(Number of bytes matching the rule)POLYCUBE";
  val["bytes"]["example"] = R"POLYCUBE()POLYCUBE";
  val["src"]["name"] = "src";
  val["src"]["type"] = "leaf"; // Suppose that type is leaf
  val["src"]["simpletype"] = "string";
  val["src"]["description"] = R"POLYCUBE(Source IP Address.)POLYCUBE";
  val["src"]["example"] = R"POLYCUBE(10.0.0.1/24)POLYCUBE";
  val["dst"]["name"] = "dst";
  val["dst"]["type"] = "leaf"; // Suppose that type is leaf
  val["dst"]["simpletype"] = "string";
  val["dst"]["description"] = R"POLYCUBE(Destination IP Address.)POLYCUBE";
  val["dst"]["example"] = R"POLYCUBE(10.0.0.2/24)POLYCUBE";
  val["l4proto"]["name"] = "l4proto";
  val["l4proto"]["type"] = "leaf"; // Suppose that type is leaf
  val["l4proto"]["simpletype"] = "string";
  val["l4proto"]["description"] = R"POLYCUBE(Level 4 Protocol.)POLYCUBE";
  val["l4proto"]["example"] = R"POLYCUBE()POLYCUBE";
  val["sport"]["name"] = "sport";
  val["sport"]["type"] = "leaf"; // Suppose that type is leaf
  val["sport"]["simpletype"] = "integer";
  val["sport"]["description"] = R"POLYCUBE(Source L4 Port)POLYCUBE";
  val["sport"]["example"] = R"POLYCUBE()POLYCUBE";
  val["dport"]["name"] = "dport";
  val["dport"]["type"] = "leaf"; // Suppose that type is leaf
  val["dport"]["simpletype"] = "integer";
  val["dport"]["description"] = R"POLYCUBE(Destination L4 Port)POLYCUBE";
  val["dport"]["example"] = R"POLYCUBE()POLYCUBE";
  val["tcpflags"]["name"] = "tcpflags";
  val["tcpflags"]["type"] = "leaf"; // Suppose that type is leaf
  val["tcpflags"]["simpletype"] = "string";
  val["tcpflags"]["description"] = R"POLYCUBE(TCP flags. Allowed values: SYN, FIN, ACK, RST, PSH, URG, CWR, ECE. ! means set to 0.)POLYCUBE";
  val["tcpflags"]["example"] = R"POLYCUBE(!FIN,SYN,!RST,!ACK)POLYCUBE";
  val["conntrack"]["name"] = "conntrack";
  val["conntrack"]["type"] = "leaf"; // Suppose that type is leaf
  val["conntrack"]["simpletype"] = "string";
  val["conntrack"]["description"] = R"POLYCUBE(Connection status (NEW, ESTABLISHED, RELATED, INVALID))POLYCUBE";
  val["conntrack"]["example"] = R"POLYCUBE()POLYCUBE";
  val["action"]["name"] = "action";
  val["action"]["type"] = "leaf"; // Suppose that type is leaf
  val["action"]["simpletype"] = "string";
  val["action"]["description"] = R"POLYCUBE(Action if the rule matches. Default is DROP.)POLYCUBE";
  val["action"]["example"] = R"POLYCUBE(DROP, FORWARD, LOG)POLYCUBE";
  val["description"]["name"] = "description";
  val["description"]["type"] = "leaf"; // Suppose that type is leaf
  val["description"]["simpletype"] = "string";
  val["description"]["description"] = R"POLYCUBE(Description of the rule.)POLYCUBE";
  val["description"]["example"] = R"POLYCUBE(This rule blocks incoming SSH connections.)POLYCUBE";

  return val;
}

nlohmann::json ChainStatsJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

nlohmann::json ChainStatsJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> ChainStatsJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

uint32_t ChainStatsJsonObject::getId() const {
  return m_id;
}

void ChainStatsJsonObject::setId(uint32_t value) {
  m_id = value;
  m_idIsSet = true;
}

bool ChainStatsJsonObject::idIsSet() const {
  return m_idIsSet;
}





uint64_t ChainStatsJsonObject::getPkts() const {
  return m_pkts;
}

void ChainStatsJsonObject::setPkts(uint64_t value) {
  m_pkts = value;
  m_pktsIsSet = true;
}

bool ChainStatsJsonObject::pktsIsSet() const {
  return m_pktsIsSet;
}

void ChainStatsJsonObject::unsetPkts() {
  m_pktsIsSet = false;
}



uint64_t ChainStatsJsonObject::getBytes() const {
  return m_bytes;
}

void ChainStatsJsonObject::setBytes(uint64_t value) {
  m_bytes = value;
  m_bytesIsSet = true;
}

bool ChainStatsJsonObject::bytesIsSet() const {
  return m_bytesIsSet;
}

void ChainStatsJsonObject::unsetBytes() {
  m_bytesIsSet = false;
}



std::string ChainStatsJsonObject::getSrc() const {
  return m_src;
}

void ChainStatsJsonObject::setSrc(std::string value) {
  m_src = value;
  m_srcIsSet = true;
}

bool ChainStatsJsonObject::srcIsSet() const {
  return m_srcIsSet;
}

void ChainStatsJsonObject::unsetSrc() {
  m_srcIsSet = false;
}



std::string ChainStatsJsonObject::getDst() const {
  return m_dst;
}

void ChainStatsJsonObject::setDst(std::string value) {
  m_dst = value;
  m_dstIsSet = true;
}

bool ChainStatsJsonObject::dstIsSet() const {
  return m_dstIsSet;
}

void ChainStatsJsonObject::unsetDst() {
  m_dstIsSet = false;
}



std::string ChainStatsJsonObject::getL4proto() const {
  return m_l4proto;
}

void ChainStatsJsonObject::setL4proto(std::string value) {
  m_l4proto = value;
  m_l4protoIsSet = true;
}

bool ChainStatsJsonObject::l4protoIsSet() const {
  return m_l4protoIsSet;
}

void ChainStatsJsonObject::unsetL4proto() {
  m_l4protoIsSet = false;
}



uint16_t ChainStatsJsonObject::getSport() const {
  return m_sport;
}

void ChainStatsJsonObject::setSport(uint16_t value) {
  m_sport = value;
  m_sportIsSet = true;
}

bool ChainStatsJsonObject::sportIsSet() const {
  return m_sportIsSet;
}

void ChainStatsJsonObject::unsetSport() {
  m_sportIsSet = false;
}



uint16_t ChainStatsJsonObject::getDport() const {
  return m_dport;
}

void ChainStatsJsonObject::setDport(uint16_t value) {
  m_dport = value;
  m_dportIsSet = true;
}

bool ChainStatsJsonObject::dportIsSet() const {
  return m_dportIsSet;
}

void ChainStatsJsonObject::unsetDport() {
  m_dportIsSet = false;
}



std::string ChainStatsJsonObject::getTcpflags() const {
  return m_tcpflags;
}

void ChainStatsJsonObject::setTcpflags(std::string value) {
  m_tcpflags = value;
  m_tcpflagsIsSet = true;
}

bool ChainStatsJsonObject::tcpflagsIsSet() const {
  return m_tcpflagsIsSet;
}

void ChainStatsJsonObject::unsetTcpflags() {
  m_tcpflagsIsSet = false;
}



ConntrackstatusEnum ChainStatsJsonObject::getConntrack() const {
  return m_conntrack;
}

void ChainStatsJsonObject::setConntrack(ConntrackstatusEnum value) {
  m_conntrack = value;
  m_conntrackIsSet = true;
}

bool ChainStatsJsonObject::conntrackIsSet() const {
  return m_conntrackIsSet;
}

void ChainStatsJsonObject::unsetConntrack() {
  m_conntrackIsSet = false;
}

std::string ChainStatsJsonObject::ConntrackstatusEnum_to_string(const ConntrackstatusEnum &value){
  switch(value){
    case ConntrackstatusEnum::NEW:
      return std::string("new");
    case ConntrackstatusEnum::ESTABLISHED:
      return std::string("established");
    case ConntrackstatusEnum::RELATED:
      return std::string("related");
    case ConntrackstatusEnum::INVALID:
      return std::string("invalid");
    default:
      throw std::runtime_error("Bad ChainStats conntrack");
  }
}

ConntrackstatusEnum ChainStatsJsonObject::string_to_ConntrackstatusEnum(const std::string &str){
  if (JsonObjectBase::iequals("new", str))
    return ConntrackstatusEnum::NEW;
  if (JsonObjectBase::iequals("established", str))
    return ConntrackstatusEnum::ESTABLISHED;
  if (JsonObjectBase::iequals("related", str))
    return ConntrackstatusEnum::RELATED;
  if (JsonObjectBase::iequals("invalid", str))
    return ConntrackstatusEnum::INVALID;
  throw std::runtime_error("ChainStats conntrack is invalid");
}


ActionEnum ChainStatsJsonObject::getAction() const {
  return m_action;
}

void ChainStatsJsonObject::setAction(ActionEnum value) {
  m_action = value;
  m_actionIsSet = true;
}

bool ChainStatsJsonObject::actionIsSet() const {
  return m_actionIsSet;
}

void ChainStatsJsonObject::unsetAction() {
  m_actionIsSet = false;
}

std::string ChainStatsJsonObject::ActionEnum_to_string(const ActionEnum &value){
  switch(value){
    case ActionEnum::DROP:
      return std::string("drop");
    case ActionEnum::LOG:
      return std::string("log");
    case ActionEnum::FORWARD:
      return std::string("forward");
    default:
      throw std::runtime_error("Bad ChainStats action");
  }
}

ActionEnum ChainStatsJsonObject::string_to_ActionEnum(const std::string &str){
  if (JsonObjectBase::iequals("drop", str))
    return ActionEnum::DROP;
  if (JsonObjectBase::iequals("log", str))
    return ActionEnum::LOG;
  if (JsonObjectBase::iequals("forward", str))
    return ActionEnum::FORWARD;
  throw std::runtime_error("ChainStats action is invalid");
}


std::string ChainStatsJsonObject::getDescription() const {
  return m_description;
}

void ChainStatsJsonObject::setDescription(std::string value) {
  m_description = value;
  m_descriptionIsSet = true;
}

bool ChainStatsJsonObject::descriptionIsSet() const {
  return m_descriptionIsSet;
}

void ChainStatsJsonObject::unsetDescription() {
  m_descriptionIsSet = false;
}




}
}
}
}


