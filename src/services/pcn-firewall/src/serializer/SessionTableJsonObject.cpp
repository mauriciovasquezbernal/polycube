/**
* firewall API
* Firewall Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "SessionTableJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

SessionTableJsonObject::SessionTableJsonObject() :
  m_srcIsSet (false),
  m_dstIsSet (false),
  m_l4protoIsSet (false),
  m_sportIsSet (false),
  m_dportIsSet (false),
  m_stateIsSet (false),
  m_etaIsSet (false) { }

SessionTableJsonObject::SessionTableJsonObject(nlohmann::json& val) :
  m_srcIsSet (false),
  m_dstIsSet (false),
  m_l4protoIsSet (false),
  m_sportIsSet (false),
  m_dportIsSet (false),
  m_stateIsSet (false),
  m_etaIsSet (false) {





  if (val.count("state") != 0) {
    setState(val.at("state").get<std::string>());
  }

  if (val.count("eta") != 0) {
    setEta(val.at("eta").get<uint32_t>());
  }
}

nlohmann::json SessionTableJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  val["src"] = m_src;
  val["dst"] = m_dst;
  val["l4proto"] = m_l4proto;
  val["sport"] = m_sport;
  val["dport"] = m_dport;
  if (m_stateIsSet) {
    val["state"] = m_state;
  }

  if (m_etaIsSet) {
    val["eta"] = m_eta;
  }


  return val;
}

nlohmann::json SessionTableJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["src"]["name"] = "src";
  val["src"]["type"] = "key";
  val["src"]["simpletype"] = "string";
  val["src"]["description"] = R"POLYCUBE(Source IP)POLYCUBE";
  val["src"]["example"] = R"POLYCUBE()POLYCUBE";
  val["dst"]["name"] = "dst";
  val["dst"]["type"] = "key";
  val["dst"]["simpletype"] = "string";
  val["dst"]["description"] = R"POLYCUBE(Destination IP)POLYCUBE";
  val["dst"]["example"] = R"POLYCUBE()POLYCUBE";
  val["l4proto"]["name"] = "l4proto";
  val["l4proto"]["type"] = "key";
  val["l4proto"]["simpletype"] = "string";
  val["l4proto"]["description"] = R"POLYCUBE(Level 4 Protocol.)POLYCUBE";
  val["l4proto"]["example"] = R"POLYCUBE()POLYCUBE";
  val["sport"]["name"] = "sport";
  val["sport"]["type"] = "key";
  val["sport"]["simpletype"] = "integer";
  val["sport"]["description"] = R"POLYCUBE(Source Port)POLYCUBE";
  val["sport"]["example"] = R"POLYCUBE()POLYCUBE";
  val["dport"]["name"] = "dport";
  val["dport"]["type"] = "key";
  val["dport"]["simpletype"] = "integer";
  val["dport"]["description"] = R"POLYCUBE(Destination)POLYCUBE";
  val["dport"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json SessionTableJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["state"]["name"] = "state";
  val["state"]["type"] = "leaf"; // Suppose that type is leaf
  val["state"]["simpletype"] = "string";
  val["state"]["description"] = R"POLYCUBE(Connection state.)POLYCUBE";
  val["state"]["example"] = R"POLYCUBE()POLYCUBE";
  val["eta"]["name"] = "eta";
  val["eta"]["type"] = "leaf"; // Suppose that type is leaf
  val["eta"]["simpletype"] = "integer";
  val["eta"]["description"] = R"POLYCUBE(Last packet matching the connection)POLYCUBE";
  val["eta"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json SessionTableJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

nlohmann::json SessionTableJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> SessionTableJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

std::string SessionTableJsonObject::getSrc() const {
  return m_src;
}

void SessionTableJsonObject::setSrc(std::string value) {
  m_src = value;
  m_srcIsSet = true;
}

bool SessionTableJsonObject::srcIsSet() const {
  return m_srcIsSet;
}





std::string SessionTableJsonObject::getDst() const {
  return m_dst;
}

void SessionTableJsonObject::setDst(std::string value) {
  m_dst = value;
  m_dstIsSet = true;
}

bool SessionTableJsonObject::dstIsSet() const {
  return m_dstIsSet;
}





std::string SessionTableJsonObject::getL4proto() const {
  return m_l4proto;
}

void SessionTableJsonObject::setL4proto(std::string value) {
  m_l4proto = value;
  m_l4protoIsSet = true;
}

bool SessionTableJsonObject::l4protoIsSet() const {
  return m_l4protoIsSet;
}





uint16_t SessionTableJsonObject::getSport() const {
  return m_sport;
}

void SessionTableJsonObject::setSport(uint16_t value) {
  m_sport = value;
  m_sportIsSet = true;
}

bool SessionTableJsonObject::sportIsSet() const {
  return m_sportIsSet;
}





uint16_t SessionTableJsonObject::getDport() const {
  return m_dport;
}

void SessionTableJsonObject::setDport(uint16_t value) {
  m_dport = value;
  m_dportIsSet = true;
}

bool SessionTableJsonObject::dportIsSet() const {
  return m_dportIsSet;
}





std::string SessionTableJsonObject::getState() const {
  return m_state;
}

void SessionTableJsonObject::setState(std::string value) {
  m_state = value;
  m_stateIsSet = true;
}

bool SessionTableJsonObject::stateIsSet() const {
  return m_stateIsSet;
}

void SessionTableJsonObject::unsetState() {
  m_stateIsSet = false;
}



uint32_t SessionTableJsonObject::getEta() const {
  return m_eta;
}

void SessionTableJsonObject::setEta(uint32_t value) {
  m_eta = value;
  m_etaIsSet = true;
}

bool SessionTableJsonObject::etaIsSet() const {
  return m_etaIsSet;
}

void SessionTableJsonObject::unsetEta() {
  m_etaIsSet = false;
}




}
}
}
}


