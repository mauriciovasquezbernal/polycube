/**
* firewall API
* Firewall Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* FirewallJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "ChainJsonObject.h"
#include "SessionTableJsonObject.h"
#include "PortsJsonObject.h"
#include <vector>
#include "polycube/services/cube.h"

using polycube::service::CubeType;

namespace io {
namespace swagger {
namespace server {
namespace model {

enum class FirewallLoglevelEnum {
  TRACE, DEBUG, INFO, WARN, ERR, CRITICAL, OFF
};
enum class FirewallConntrackEnum {
  ON, OFF
};
enum class FirewallAcceptEstablishedEnum {
  ON, OFF
};

/// <summary>
///
/// </summary>
class  FirewallJsonObject : public JsonObjectBase {
public:
  FirewallJsonObject();
  FirewallJsonObject(nlohmann::json& json);
  ~FirewallJsonObject() final = default;

  /////////////////////////////////////////////
  /// JsonObjectBase overrides

  nlohmann::json toJson() const final;

  static nlohmann::json helpKeys();
  static nlohmann::json helpElements();
  static nlohmann::json helpWritableLeafs();
  static nlohmann::json helpComplexElements();
  static std::vector<std::string> helpActions();
  /////////////////////////////////////////////
  /// FirewallJsonObject members

  /// <summary>
  /// Name of the firewall service
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;
  void unsetName();

  /// <summary>
  /// UUID of the Cube
  /// </summary>
  std::string getUuid() const;
  void setUuid(std::string value);
  bool uuidIsSet() const;
  void unsetUuid();

  /// <summary>
  /// Type of the Cube (TC, XDP_SKB, XDP_DRV)
  /// </summary>
  CubeType getType() const;
  void setType(CubeType value);
  bool typeIsSet() const;
  void unsetType();
  static std::string CubeType_to_string(const CubeType &value);
  static CubeType string_to_CubeType(const std::string &str);

  /// <summary>
  /// Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)
  /// </summary>
  FirewallLoglevelEnum getLoglevel() const;
  void setLoglevel(FirewallLoglevelEnum value);
  bool loglevelIsSet() const;
  void unsetLoglevel();
  static std::string FirewallLoglevelEnum_to_string(const FirewallLoglevelEnum &value);
  static FirewallLoglevelEnum string_to_FirewallLoglevelEnum(const std::string &str);
  polycube::LogLevel getPolycubeLoglevel() const;
  /// <summary>
  /// Entry of the ports table
  /// </summary>
  const std::vector<PortsJsonObject>& getPorts() const;
  void addPorts(PortsJsonObject value);
  bool portsIsSet() const;
  void unsetPorts();

  /// <summary>
  /// Name for the ingress port, from which arrives traffic processed by INGRESS chain (by default it&#39;s the first port of the cube)
  /// </summary>
  std::string getIngressPort() const;
  void setIngressPort(std::string value);
  bool ingressPortIsSet() const;
  void unsetIngressPort();

  /// <summary>
  /// Name for the egress port, from which arrives traffic processed by EGRESS chain (by default it&#39;s the second port of the cube)
  /// </summary>
  std::string getEgressPort() const;
  void setEgressPort(std::string value);
  bool egressPortIsSet() const;
  void unsetEgressPort();

  /// <summary>
  /// Enables the Connection Tracking module. Mandatory if connection tracking rules are needed. Default is ON.
  /// </summary>
  FirewallConntrackEnum getConntrack() const;
  void setConntrack(FirewallConntrackEnum value);
  bool conntrackIsSet() const;
  void unsetConntrack();
  static std::string FirewallConntrackEnum_to_string(const FirewallConntrackEnum &value);
  static FirewallConntrackEnum string_to_FirewallConntrackEnum(const std::string &str);

  /// <summary>
  /// If Connection Tracking is enabled, all packets belonging to ESTABLISHED connections will be forwarded automatically. Default is ON.
  /// </summary>
  FirewallAcceptEstablishedEnum getAcceptEstablished() const;
  void setAcceptEstablished(FirewallAcceptEstablishedEnum value);
  bool acceptEstablishedIsSet() const;
  void unsetAcceptEstablished();
  static std::string FirewallAcceptEstablishedEnum_to_string(const FirewallAcceptEstablishedEnum &value);
  static FirewallAcceptEstablishedEnum string_to_FirewallAcceptEstablishedEnum(const std::string &str);

  /// <summary>
  /// Interactive mode applies new rules immediately; if &#39;false&#39;, the command &#39;apply-rules&#39; has to be used to apply all the rules at once. Default is TRUE.
  /// </summary>
  bool getInteractive() const;
  void setInteractive(bool value);
  bool interactiveIsSet() const;
  void unsetInteractive();

  /// <summary>
  ///
  /// </summary>
  const std::vector<SessionTableJsonObject>& getSessionTable() const;
  void addSessionTable(SessionTableJsonObject value);
  bool sessionTableIsSet() const;
  void unsetSessionTable();

  /// <summary>
  ///
  /// </summary>
  const std::vector<ChainJsonObject>& getChain() const;
  void addChain(ChainJsonObject value);
  bool chainIsSet() const;
  void unsetChain();


private:
  std::string m_name;
  bool m_nameIsSet;
  std::string m_uuid;
  bool m_uuidIsSet;
  CubeType m_type;
  bool m_typeIsSet;
  FirewallLoglevelEnum m_loglevel;
  bool m_loglevelIsSet;
  std::vector<PortsJsonObject> m_ports;
  bool m_portsIsSet;
  std::string m_ingressPort;
  bool m_ingressPortIsSet;
  std::string m_egressPort;
  bool m_egressPortIsSet;
  FirewallConntrackEnum m_conntrack;
  bool m_conntrackIsSet;
  FirewallAcceptEstablishedEnum m_acceptEstablished;
  bool m_acceptEstablishedIsSet;
  bool m_interactive;
  bool m_interactiveIsSet;
  std::vector<SessionTableJsonObject> m_sessionTable;
  bool m_sessionTableIsSet;
  std::vector<ChainJsonObject> m_chain;
  bool m_chainIsSet;
};

}
}
}
}

