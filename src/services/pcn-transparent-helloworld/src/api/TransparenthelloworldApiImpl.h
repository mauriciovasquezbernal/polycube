/**
* transparenthelloworld API
* Transparent-Helloworld Service
*
* OpenAPI spec version: 1.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/netgroup-polito/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* TransparenthelloworldApiImpl.h
*
*
*/

#pragma once

#include "TransparenthelloworldApi.h"


#include <memory>
#include <map>
#include <mutex>
#include "../Transparenthelloworld.h"

#include "TransparenthelloworldJsonObject.h"
#include <vector>

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

class TransparenthelloworldApiImpl : public io::swagger::server::api::TransparenthelloworldApi {
public:
  TransparenthelloworldApiImpl();
  ~TransparenthelloworldApiImpl() { };

  void create_transparenthelloworld_by_id(const std::string &name, const TransparenthelloworldJsonObject &value);
  void delete_transparenthelloworld_by_id(const std::string &name);
  TransparenthelloworldJsonObject read_transparenthelloworld_by_id(const std::string &name);
  TransparenthelloworldEgressActionEnum read_transparenthelloworld_egress_action_by_id(const std::string &name);
  TransparenthelloworldIngressActionEnum read_transparenthelloworld_ingress_action_by_id(const std::string &name);
  std::vector<TransparenthelloworldJsonObject> read_transparenthelloworld_list_by_id();
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_transparenthelloworld_list_by_id_get_list();
  TransparenthelloworldLoglevelEnum read_transparenthelloworld_loglevel_by_id(const std::string &name);
  CubeType read_transparenthelloworld_type_by_id(const std::string &name);
  std::string read_transparenthelloworld_uuid_by_id(const std::string &name);
  void replace_transparenthelloworld_by_id(const std::string &name, const TransparenthelloworldJsonObject &value);
  void update_transparenthelloworld_by_id(const std::string &name, const TransparenthelloworldJsonObject &value);
  void update_transparenthelloworld_egress_action_by_id(const std::string &name, const TransparenthelloworldEgressActionEnum &value);
  void update_transparenthelloworld_ingress_action_by_id(const std::string &name, const TransparenthelloworldIngressActionEnum &value);
  void update_transparenthelloworld_list_by_id(const std::vector<TransparenthelloworldJsonObject> &value);
  void update_transparenthelloworld_loglevel_by_id(const std::string &name, const TransparenthelloworldLoglevelEnum &value);

private:
  std::unordered_map<std::string, std::shared_ptr<Transparenthelloworld>> cubes;
  std::shared_ptr<Transparenthelloworld> get_cube(const std::string &name);
  std::mutex cubes_mutex;
};

}
}
}
}

