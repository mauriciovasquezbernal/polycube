/**
* transparenthelloworld API
* Transparent-Helloworld Service
*
* OpenAPI spec version: 1.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/netgroup-polito/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* TransparenthelloworldApi.h
*
*/

#pragma once

#define POLYCUBE_SERVICE_NAME "transparenthelloworld"


#include <polycube/services/http_router.h>
#include <polycube/services/management_interface.h>
#include <vector>

#include "TransparenthelloworldJsonObject.h"
#include <vector>

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;
using namespace polycube::service;

class  TransparenthelloworldApi : public ManagementInterface {
 public:
  TransparenthelloworldApi();
  virtual ~TransparenthelloworldApi() {};

  const std::string base = "/" + std::string(POLYCUBE_SERVICE_NAME) + "/";

 protected:
  void setup_routes();
  void control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) override;

  void create_transparenthelloworld_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_transparenthelloworld_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_transparenthelloworld_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_transparenthelloworld_egress_action_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_transparenthelloworld_ingress_action_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_transparenthelloworld_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_transparenthelloworld_loglevel_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_transparenthelloworld_type_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_transparenthelloworld_uuid_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_transparenthelloworld_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_transparenthelloworld_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_transparenthelloworld_egress_action_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_transparenthelloworld_ingress_action_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_transparenthelloworld_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_transparenthelloworld_loglevel_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);

  void read_transparenthelloworld_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_transparenthelloworld_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);


  polycube::service::Rest::Router router;

  /// <summary>
  /// Create transparenthelloworld by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: transparenthelloworld
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">transparenthelloworldbody object</param>
  virtual void create_transparenthelloworld_by_id(const std::string &name, const TransparenthelloworldJsonObject &value) = 0;
  /// <summary>
  /// Delete transparenthelloworld by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: transparenthelloworld
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_transparenthelloworld_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read transparenthelloworld by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: transparenthelloworld
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual TransparenthelloworldJsonObject read_transparenthelloworld_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read egress-action by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: egress-action
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual TransparenthelloworldEgressActionEnum read_transparenthelloworld_egress_action_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read ingress-action by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: ingress-action
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual TransparenthelloworldIngressActionEnum read_transparenthelloworld_ingress_action_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read transparenthelloworld by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: transparenthelloworld
  /// </remarks>
  virtual std::vector<TransparenthelloworldJsonObject> read_transparenthelloworld_list_by_id() = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_transparenthelloworld_list_by_id_get_list() = 0;
  /// <summary>
  /// Read loglevel by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: loglevel
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual TransparenthelloworldLoglevelEnum read_transparenthelloworld_loglevel_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read type by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: type
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual CubeType read_transparenthelloworld_type_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read uuid by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: uuid
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_transparenthelloworld_uuid_by_id(const std::string &name) = 0;
  /// <summary>
  /// Replace transparenthelloworld by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: transparenthelloworld
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">transparenthelloworldbody object</param>
  virtual void replace_transparenthelloworld_by_id(const std::string &name, const TransparenthelloworldJsonObject &value) = 0;
  /// <summary>
  /// Update transparenthelloworld by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: transparenthelloworld
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">transparenthelloworldbody object</param>
  virtual void update_transparenthelloworld_by_id(const std::string &name, const TransparenthelloworldJsonObject &value) = 0;
  /// <summary>
  /// Update egress-action by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: egress-action
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Action performed on egress packets</param>
  virtual void update_transparenthelloworld_egress_action_by_id(const std::string &name, const TransparenthelloworldEgressActionEnum &value) = 0;
  /// <summary>
  /// Update ingress-action by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: ingress-action
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Action performed on ingress packets</param>
  virtual void update_transparenthelloworld_ingress_action_by_id(const std::string &name, const TransparenthelloworldIngressActionEnum &value) = 0;
  /// <summary>
  /// Update transparenthelloworld by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: transparenthelloworld
  /// </remarks>
  /// <param name="value">transparenthelloworldbody object</param>
  virtual void update_transparenthelloworld_list_by_id(const std::vector<TransparenthelloworldJsonObject> &value) = 0;
  /// <summary>
  /// Update loglevel by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: loglevel
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)</param>
  virtual void update_transparenthelloworld_loglevel_by_id(const std::string &name, const TransparenthelloworldLoglevelEnum &value) = 0;
};

}
}
}
}

