/**
* transparenthelloworld API
* Transparent-Helloworld Service
*
* OpenAPI spec version: 1.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "TransparenthelloworldJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

TransparenthelloworldJsonObject::TransparenthelloworldJsonObject() : 
  m_nameIsSet(false),
  m_uuidIsSet(false),
  m_type(CubeType::TC),
  m_typeIsSet(true),
  m_loglevel(TransparenthelloworldLoglevelEnum::INFO),
  m_loglevelIsSet(true),
  m_ingressAction(TransparenthelloworldIngressActionEnum::PASS),
  m_ingressActionIsSet(true),
  m_egressAction(TransparenthelloworldEgressActionEnum::PASS),
  m_egressActionIsSet(true) { }

TransparenthelloworldJsonObject::TransparenthelloworldJsonObject(nlohmann::json &val) : 
  m_nameIsSet(false),
  m_uuidIsSet(false),
  m_typeIsSet(false),
  m_loglevelIsSet(false),
  m_ingressActionIsSet(false),
  m_egressActionIsSet(false) { 
  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("uuid")) {
    setUuid(val.at("uuid").get<std::string>());
  }

  if (val.count("type")) {
    setType(string_to_CubeType(val.at("type").get<std::string>()));
  }

  if (val.count("loglevel")) {
    setLoglevel(string_to_TransparenthelloworldLoglevelEnum(val.at("loglevel").get<std::string>()));
  }

  if (val.count("ingress-action")) {
    setIngressAction(string_to_TransparenthelloworldIngressActionEnum(val.at("ingress-action").get<std::string>()));
  }

  if (val.count("egress-action")) {
    setEgressAction(string_to_TransparenthelloworldEgressActionEnum(val.at("egress-action").get<std::string>()));
  }
}

nlohmann::json TransparenthelloworldJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_uuidIsSet) {
    val["uuid"] = m_uuid;
  }

  if (m_typeIsSet) {
    val["type"] = CubeType_to_string(m_type);
  }

  if (m_loglevelIsSet) {
    val["loglevel"] = TransparenthelloworldLoglevelEnum_to_string(m_loglevel);
  }

  if (m_ingressActionIsSet) {
    val["ingress-action"] = TransparenthelloworldIngressActionEnum_to_string(m_ingressAction);
  }

  if (m_egressActionIsSet) {
    val["egress-action"] = TransparenthelloworldEgressActionEnum_to_string(m_egressAction);
  }


  return val;
}

nlohmann::json TransparenthelloworldJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["name"]["name"] = "name";
  val["name"]["type"] = "key";
  val["name"]["simpletype"] = "string";
  val["name"]["description"] = R"POLYCUBE(Name of the transparenthelloworld service)POLYCUBE";
  val["name"]["example"] = R"POLYCUBE(transparenthelloworld1)POLYCUBE";

  return val;
}

nlohmann::json TransparenthelloworldJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["uuid"]["name"] = "uuid";
  val["uuid"]["type"] = "leaf"; // Suppose that type is leaf
  val["uuid"]["simpletype"] = "string";
  val["uuid"]["description"] = R"POLYCUBE(UUID of the Cube)POLYCUBE";
  val["uuid"]["example"] = R"POLYCUBE()POLYCUBE";
  val["type"]["name"] = "type";
  val["type"]["type"] = "leaf"; // Suppose that type is leaf
  val["type"]["simpletype"] = "string";
  val["type"]["description"] = R"POLYCUBE(Type of the Cube (TC, XDP_SKB, XDP_DRV))POLYCUBE";
  val["type"]["example"] = R"POLYCUBE(TC)POLYCUBE";
  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["type"] = "leaf"; // Suppose that type is leaf
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";
  val["ingress-action"]["name"] = "ingress-action";
  val["ingress-action"]["type"] = "leaf"; // Suppose that type is leaf
  val["ingress-action"]["simpletype"] = "string";
  val["ingress-action"]["description"] = R"POLYCUBE(Action performed on ingress packets)POLYCUBE";
  val["ingress-action"]["example"] = R"POLYCUBE()POLYCUBE";
  val["egress-action"]["name"] = "egress-action";
  val["egress-action"]["type"] = "leaf"; // Suppose that type is leaf
  val["egress-action"]["simpletype"] = "string";
  val["egress-action"]["description"] = R"POLYCUBE(Action performed on egress packets)POLYCUBE";
  val["egress-action"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json TransparenthelloworldJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";
  val["ingress-action"]["name"] = "ingress-action";
  val["ingress-action"]["simpletype"] = "string";
  val["ingress-action"]["description"] = R"POLYCUBE(Action performed on ingress packets)POLYCUBE";
  val["ingress-action"]["example"] = R"POLYCUBE()POLYCUBE";
  val["egress-action"]["name"] = "egress-action";
  val["egress-action"]["simpletype"] = "string";
  val["egress-action"]["description"] = R"POLYCUBE(Action performed on egress packets)POLYCUBE";
  val["egress-action"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json TransparenthelloworldJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> TransparenthelloworldJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

std::string TransparenthelloworldJsonObject::getName() const {
  return m_name;
}

void TransparenthelloworldJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool TransparenthelloworldJsonObject::nameIsSet() const {
  return m_nameIsSet;
}





std::string TransparenthelloworldJsonObject::getUuid() const {
  return m_uuid;
}

void TransparenthelloworldJsonObject::setUuid(std::string value) {
  m_uuid = value;
  m_uuidIsSet = true;
}

bool TransparenthelloworldJsonObject::uuidIsSet() const {
  return m_uuidIsSet;
}

void TransparenthelloworldJsonObject::unsetUuid() {
  m_uuidIsSet = false;
}



CubeType TransparenthelloworldJsonObject::getType() const {
  return m_type;
}

void TransparenthelloworldJsonObject::setType(CubeType value) {
  m_type = value;
  m_typeIsSet = true;
}

bool TransparenthelloworldJsonObject::typeIsSet() const {
  return m_typeIsSet;
}

void TransparenthelloworldJsonObject::unsetType() {
  m_typeIsSet = false;
}

std::string TransparenthelloworldJsonObject::CubeType_to_string(const CubeType &value){
  switch(value){
    case CubeType::TC:
      return std::string("tc");
    case CubeType::XDP_SKB:
      return std::string("xdp_skb");
    case CubeType::XDP_DRV:
      return std::string("xdp_drv");
    default:
      throw std::runtime_error("Bad Transparenthelloworld type");
  }
}

CubeType TransparenthelloworldJsonObject::string_to_CubeType(const std::string &str){
  if (JsonObjectBase::iequals("tc", str))
    return CubeType::TC;
  if (JsonObjectBase::iequals("xdp_skb", str))
    return CubeType::XDP_SKB;
  if (JsonObjectBase::iequals("xdp_drv", str))
    return CubeType::XDP_DRV;
  throw std::runtime_error("Transparenthelloworld type is invalid");
}


TransparenthelloworldLoglevelEnum TransparenthelloworldJsonObject::getLoglevel() const {
  return m_loglevel;
}

void TransparenthelloworldJsonObject::setLoglevel(TransparenthelloworldLoglevelEnum value) {
  m_loglevel = value;
  m_loglevelIsSet = true;
}

bool TransparenthelloworldJsonObject::loglevelIsSet() const {
  return m_loglevelIsSet;
}

void TransparenthelloworldJsonObject::unsetLoglevel() {
  m_loglevelIsSet = false;
}

std::string TransparenthelloworldJsonObject::TransparenthelloworldLoglevelEnum_to_string(const TransparenthelloworldLoglevelEnum &value){
  switch(value){
    case TransparenthelloworldLoglevelEnum::TRACE:
      return std::string("trace");
    case TransparenthelloworldLoglevelEnum::DEBUG:
      return std::string("debug");
    case TransparenthelloworldLoglevelEnum::INFO:
      return std::string("info");
    case TransparenthelloworldLoglevelEnum::WARN:
      return std::string("warn");
    case TransparenthelloworldLoglevelEnum::ERR:
      return std::string("err");
    case TransparenthelloworldLoglevelEnum::CRITICAL:
      return std::string("critical");
    case TransparenthelloworldLoglevelEnum::OFF:
      return std::string("off");
    default:
      throw std::runtime_error("Bad Transparenthelloworld loglevel");
  }
}

TransparenthelloworldLoglevelEnum TransparenthelloworldJsonObject::string_to_TransparenthelloworldLoglevelEnum(const std::string &str){
  if (JsonObjectBase::iequals("trace", str))
    return TransparenthelloworldLoglevelEnum::TRACE;
  if (JsonObjectBase::iequals("debug", str))
    return TransparenthelloworldLoglevelEnum::DEBUG;
  if (JsonObjectBase::iequals("info", str))
    return TransparenthelloworldLoglevelEnum::INFO;
  if (JsonObjectBase::iequals("warn", str))
    return TransparenthelloworldLoglevelEnum::WARN;
  if (JsonObjectBase::iequals("err", str))
    return TransparenthelloworldLoglevelEnum::ERR;
  if (JsonObjectBase::iequals("critical", str))
    return TransparenthelloworldLoglevelEnum::CRITICAL;
  if (JsonObjectBase::iequals("off", str))
    return TransparenthelloworldLoglevelEnum::OFF;
  throw std::runtime_error("Transparenthelloworld loglevel is invalid");
}

  polycube::LogLevel TransparenthelloworldJsonObject::getPolycubeLoglevel() const {
    switch(m_loglevel) {
      case TransparenthelloworldLoglevelEnum::TRACE:
        return polycube::LogLevel::TRACE;
      case TransparenthelloworldLoglevelEnum::DEBUG:
        return polycube::LogLevel::DEBUG;
      case TransparenthelloworldLoglevelEnum::INFO:
        return polycube::LogLevel::INFO;
      case TransparenthelloworldLoglevelEnum::WARN:
        return polycube::LogLevel::WARN;
      case TransparenthelloworldLoglevelEnum::ERR:
        return polycube::LogLevel::ERR;
      case TransparenthelloworldLoglevelEnum::CRITICAL:
        return polycube::LogLevel::CRITICAL;
      case TransparenthelloworldLoglevelEnum::OFF:
        return polycube::LogLevel::OFF;
    }
  }
TransparenthelloworldIngressActionEnum TransparenthelloworldJsonObject::getIngressAction() const {
  return m_ingressAction;
}

void TransparenthelloworldJsonObject::setIngressAction(TransparenthelloworldIngressActionEnum value) {
  m_ingressAction = value;
  m_ingressActionIsSet = true;
}

bool TransparenthelloworldJsonObject::ingressActionIsSet() const {
  return m_ingressActionIsSet;
}

void TransparenthelloworldJsonObject::unsetIngressAction() {
  m_ingressActionIsSet = false;
}

std::string TransparenthelloworldJsonObject::TransparenthelloworldIngressActionEnum_to_string(const TransparenthelloworldIngressActionEnum &value){
  switch(value){
    case TransparenthelloworldIngressActionEnum::DROP:
      return std::string("drop");
    case TransparenthelloworldIngressActionEnum::PASS:
      return std::string("pass");
    case TransparenthelloworldIngressActionEnum::SLOWPATH:
      return std::string("slowpath");
    default:
      throw std::runtime_error("Bad Transparenthelloworld ingressAction");
  }
}

TransparenthelloworldIngressActionEnum TransparenthelloworldJsonObject::string_to_TransparenthelloworldIngressActionEnum(const std::string &str){
  if (JsonObjectBase::iequals("drop", str))
    return TransparenthelloworldIngressActionEnum::DROP;
  if (JsonObjectBase::iequals("pass", str))
    return TransparenthelloworldIngressActionEnum::PASS;
  if (JsonObjectBase::iequals("slowpath", str))
    return TransparenthelloworldIngressActionEnum::SLOWPATH;
  throw std::runtime_error("Transparenthelloworld ingressAction is invalid");
}


TransparenthelloworldEgressActionEnum TransparenthelloworldJsonObject::getEgressAction() const {
  return m_egressAction;
}

void TransparenthelloworldJsonObject::setEgressAction(TransparenthelloworldEgressActionEnum value) {
  m_egressAction = value;
  m_egressActionIsSet = true;
}

bool TransparenthelloworldJsonObject::egressActionIsSet() const {
  return m_egressActionIsSet;
}

void TransparenthelloworldJsonObject::unsetEgressAction() {
  m_egressActionIsSet = false;
}

std::string TransparenthelloworldJsonObject::TransparenthelloworldEgressActionEnum_to_string(const TransparenthelloworldEgressActionEnum &value){
  switch(value){
    case TransparenthelloworldEgressActionEnum::DROP:
      return std::string("drop");
    case TransparenthelloworldEgressActionEnum::PASS:
      return std::string("pass");
    case TransparenthelloworldEgressActionEnum::SLOWPATH:
      return std::string("slowpath");
    default:
      throw std::runtime_error("Bad Transparenthelloworld egressAction");
  }
}

TransparenthelloworldEgressActionEnum TransparenthelloworldJsonObject::string_to_TransparenthelloworldEgressActionEnum(const std::string &str){
  if (JsonObjectBase::iequals("drop", str))
    return TransparenthelloworldEgressActionEnum::DROP;
  if (JsonObjectBase::iequals("pass", str))
    return TransparenthelloworldEgressActionEnum::PASS;
  if (JsonObjectBase::iequals("slowpath", str))
    return TransparenthelloworldEgressActionEnum::SLOWPATH;
  throw std::runtime_error("Transparenthelloworld egressAction is invalid");
}



}
}
}
}

