/**
* transparenthelloworld API
* transparenthelloworld API generated from transparenthelloworld.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "TransparenthelloworldJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

TransparenthelloworldJsonObject::TransparenthelloworldJsonObject() {
  m_nameIsSet = false;
  m_ingressAction = TransparenthelloworldIngressActionEnum::PASS;
  m_ingressActionIsSet = true;
  m_egressAction = TransparenthelloworldEgressActionEnum::PASS;
  m_egressActionIsSet = true;
}

TransparenthelloworldJsonObject::TransparenthelloworldJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_ingressActionIsSet = false;
  m_egressActionIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("ingress-action")) {
    setIngressAction(string_to_TransparenthelloworldIngressActionEnum(val.at("ingress-action").get<std::string>()));
  }

  if (val.count("egress-action")) {
    setEgressAction(string_to_TransparenthelloworldEgressActionEnum(val.at("egress-action").get<std::string>()));
  }
}

nlohmann::json TransparenthelloworldJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_ingressActionIsSet) {
    val["ingress-action"] = TransparenthelloworldIngressActionEnum_to_string(m_ingressAction);
  }

  if (m_egressActionIsSet) {
    val["egress-action"] = TransparenthelloworldEgressActionEnum_to_string(m_egressAction);
  }

  return val;
}

std::string TransparenthelloworldJsonObject::getName() const {
  return m_name;
}

void TransparenthelloworldJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool TransparenthelloworldJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



TransparenthelloworldIngressActionEnum TransparenthelloworldJsonObject::getIngressAction() const {
  return m_ingressAction;
}

void TransparenthelloworldJsonObject::setIngressAction(TransparenthelloworldIngressActionEnum value) {
  m_ingressAction = value;
  m_ingressActionIsSet = true;
}

bool TransparenthelloworldJsonObject::ingressActionIsSet() const {
  return m_ingressActionIsSet;
}

void TransparenthelloworldJsonObject::unsetIngressAction() {
  m_ingressActionIsSet = false;
}

std::string TransparenthelloworldJsonObject::TransparenthelloworldIngressActionEnum_to_string(const TransparenthelloworldIngressActionEnum &value){
  switch(value) {
    case TransparenthelloworldIngressActionEnum::DROP:
      return std::string("drop");
    case TransparenthelloworldIngressActionEnum::PASS:
      return std::string("pass");
    case TransparenthelloworldIngressActionEnum::SLOWPATH:
      return std::string("slowpath");
    default:
      throw std::runtime_error("Bad Transparenthelloworld ingressAction");
  }
}

TransparenthelloworldIngressActionEnum TransparenthelloworldJsonObject::string_to_TransparenthelloworldIngressActionEnum(const std::string &str){
  if (JsonObjectBase::iequals("drop", str))
    return TransparenthelloworldIngressActionEnum::DROP;
  if (JsonObjectBase::iequals("pass", str))
    return TransparenthelloworldIngressActionEnum::PASS;
  if (JsonObjectBase::iequals("slowpath", str))
    return TransparenthelloworldIngressActionEnum::SLOWPATH;
  throw std::runtime_error("Transparenthelloworld ingressAction is invalid");
}
TransparenthelloworldEgressActionEnum TransparenthelloworldJsonObject::getEgressAction() const {
  return m_egressAction;
}

void TransparenthelloworldJsonObject::setEgressAction(TransparenthelloworldEgressActionEnum value) {
  m_egressAction = value;
  m_egressActionIsSet = true;
}

bool TransparenthelloworldJsonObject::egressActionIsSet() const {
  return m_egressActionIsSet;
}

void TransparenthelloworldJsonObject::unsetEgressAction() {
  m_egressActionIsSet = false;
}

std::string TransparenthelloworldJsonObject::TransparenthelloworldEgressActionEnum_to_string(const TransparenthelloworldEgressActionEnum &value){
  switch(value) {
    case TransparenthelloworldEgressActionEnum::DROP:
      return std::string("drop");
    case TransparenthelloworldEgressActionEnum::PASS:
      return std::string("pass");
    case TransparenthelloworldEgressActionEnum::SLOWPATH:
      return std::string("slowpath");
    default:
      throw std::runtime_error("Bad Transparenthelloworld egressAction");
  }
}

TransparenthelloworldEgressActionEnum TransparenthelloworldJsonObject::string_to_TransparenthelloworldEgressActionEnum(const std::string &str){
  if (JsonObjectBase::iequals("drop", str))
    return TransparenthelloworldEgressActionEnum::DROP;
  if (JsonObjectBase::iequals("pass", str))
    return TransparenthelloworldEgressActionEnum::PASS;
  if (JsonObjectBase::iequals("slowpath", str))
    return TransparenthelloworldEgressActionEnum::SLOWPATH;
  throw std::runtime_error("Transparenthelloworld egressAction is invalid");
}

nlohmann::json TransparenthelloworldJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["name"]["name"] = "name";
  val["name"]["type"] = "key";
  val["name"]["simpletype"] = "string";
  val["name"]["description"] = R"POLYCUBE(Name of the transparenthelloworld service)POLYCUBE";
  val["name"]["example"] = R"POLYCUBE(transparenthelloworld1)POLYCUBE";

  return val;
}

nlohmann::json TransparenthelloworldJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["uuid"]["name"] = "uuid";
  val["uuid"]["type"] = "leaf"; // Suppose that type is leaf
  val["uuid"]["simpletype"] = "string";
  val["uuid"]["description"] = R"POLYCUBE(UUID of the Cube)POLYCUBE";
  val["uuid"]["example"] = R"POLYCUBE()POLYCUBE";
  val["type"]["name"] = "type";
  val["type"]["type"] = "leaf"; // Suppose that type is leaf
  val["type"]["simpletype"] = "string";
  val["type"]["description"] = R"POLYCUBE(Type of the Cube (TC, XDP_SKB, XDP_DRV))POLYCUBE";
  val["type"]["example"] = R"POLYCUBE(TC)POLYCUBE";
  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["type"] = "leaf"; // Suppose that type is leaf
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";
  val["ingress-action"]["name"] = "ingress-action";
  val["ingress-action"]["type"] = "leaf"; // Suppose that type is leaf
  val["ingress-action"]["simpletype"] = "string";
  val["ingress-action"]["description"] = R"POLYCUBE(Action performed on ingress packets)POLYCUBE";
  val["ingress-action"]["example"] = R"POLYCUBE()POLYCUBE";
  val["egress-action"]["name"] = "egress-action";
  val["egress-action"]["type"] = "leaf"; // Suppose that type is leaf
  val["egress-action"]["simpletype"] = "string";
  val["egress-action"]["description"] = R"POLYCUBE(Action performed on egress packets)POLYCUBE";
  val["egress-action"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json TransparenthelloworldJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";
  val["ingress-action"]["name"] = "ingress-action";
  val["ingress-action"]["simpletype"] = "string";
  val["ingress-action"]["description"] = R"POLYCUBE(Action performed on ingress packets)POLYCUBE";
  val["ingress-action"]["example"] = R"POLYCUBE()POLYCUBE";
  val["egress-action"]["name"] = "egress-action";
  val["egress-action"]["simpletype"] = "string";
  val["egress-action"]["description"] = R"POLYCUBE(Action performed on egress packets)POLYCUBE";
  val["egress-action"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json TransparenthelloworldJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> TransparenthelloworldJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

}
}
}
}

