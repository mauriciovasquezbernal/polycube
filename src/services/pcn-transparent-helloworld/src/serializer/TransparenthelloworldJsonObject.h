/**
* transparenthelloworld API
* Transparent-Helloworld Service
*
* OpenAPI spec version: 1.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* TransparenthelloworldJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "polycube/services/cube.h"

using polycube::service::CubeType;

namespace io {
namespace swagger {
namespace server {
namespace model {

enum class TransparenthelloworldLoglevelEnum {
  TRACE, DEBUG, INFO, WARN, ERR, CRITICAL, OFF
};
enum class TransparenthelloworldIngressActionEnum {
  DROP, PASS, SLOWPATH
};
enum class TransparenthelloworldEgressActionEnum {
  DROP, PASS, SLOWPATH
};

/// <summary>
///
/// </summary>
class  TransparenthelloworldJsonObject : public JsonObjectBase {
public:
  TransparenthelloworldJsonObject();
  TransparenthelloworldJsonObject(nlohmann::json& json);
  ~TransparenthelloworldJsonObject() final = default;

  /////////////////////////////////////////////
  /// JsonObjectBase overrides

  nlohmann::json toJson() const final;

  static nlohmann::json helpKeys();
  static nlohmann::json helpElements();
  static nlohmann::json helpWritableLeafs();
  static nlohmann::json helpComplexElements();
  static std::vector<std::string> helpActions();
  /////////////////////////////////////////////
  /// TransparenthelloworldJsonObject members

  /// <summary>
  /// Name of the transparenthelloworld service
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;
  void unsetName();

  /// <summary>
  /// UUID of the Cube
  /// </summary>
  std::string getUuid() const;
  void setUuid(std::string value);
  bool uuidIsSet() const;
  void unsetUuid();

  /// <summary>
  /// Type of the Cube (TC, XDP_SKB, XDP_DRV)
  /// </summary>
  CubeType getType() const;
  void setType(CubeType value);
  bool typeIsSet() const;
  void unsetType();
  static std::string CubeType_to_string(const CubeType &value);
  static CubeType string_to_CubeType(const std::string &str);

  /// <summary>
  /// Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)
  /// </summary>
  TransparenthelloworldLoglevelEnum getLoglevel() const;
  void setLoglevel(TransparenthelloworldLoglevelEnum value);
  bool loglevelIsSet() const;
  void unsetLoglevel();
  static std::string TransparenthelloworldLoglevelEnum_to_string(const TransparenthelloworldLoglevelEnum &value);
  static TransparenthelloworldLoglevelEnum string_to_TransparenthelloworldLoglevelEnum(const std::string &str);
  polycube::LogLevel getPolycubeLoglevel() const;
  /// <summary>
  /// Action performed on ingress packets
  /// </summary>
  TransparenthelloworldIngressActionEnum getIngressAction() const;
  void setIngressAction(TransparenthelloworldIngressActionEnum value);
  bool ingressActionIsSet() const;
  void unsetIngressAction();
  static std::string TransparenthelloworldIngressActionEnum_to_string(const TransparenthelloworldIngressActionEnum &value);
  static TransparenthelloworldIngressActionEnum string_to_TransparenthelloworldIngressActionEnum(const std::string &str);

  /// <summary>
  /// Action performed on egress packets
  /// </summary>
  TransparenthelloworldEgressActionEnum getEgressAction() const;
  void setEgressAction(TransparenthelloworldEgressActionEnum value);
  bool egressActionIsSet() const;
  void unsetEgressAction();
  static std::string TransparenthelloworldEgressActionEnum_to_string(const TransparenthelloworldEgressActionEnum &value);
  static TransparenthelloworldEgressActionEnum string_to_TransparenthelloworldEgressActionEnum(const std::string &str);


private:
  std::string m_name;
  bool m_nameIsSet;
  std::string m_uuid;
  bool m_uuidIsSet;
  CubeType m_type;
  bool m_typeIsSet;
  TransparenthelloworldLoglevelEnum m_loglevel;
  bool m_loglevelIsSet;
  TransparenthelloworldIngressActionEnum m_ingressAction;
  bool m_ingressActionIsSet;
  TransparenthelloworldEgressActionEnum m_egressAction;
  bool m_egressActionIsSet;
};

}
}
}
}

