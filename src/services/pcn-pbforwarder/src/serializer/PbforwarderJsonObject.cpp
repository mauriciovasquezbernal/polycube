/**
* pbforwarder API
* pbforwarder API generated from pbforwarder.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "PbforwarderJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

PbforwarderJsonObject::PbforwarderJsonObject() {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_rulesIsSet = false;
}

PbforwarderJsonObject::PbforwarderJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_rulesIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("ports")) {
    for (auto& item : val["ports"]) {
      PortsJsonObject newItem{ item };
      m_ports.push_back(newItem);
    }

    m_portsIsSet = true;
  }

  if (val.count("rules")) {
    for (auto& item : val["rules"]) {
      RulesJsonObject newItem{ item };
      m_rules.push_back(newItem);
    }

    m_rulesIsSet = true;
  }
}

nlohmann::json PbforwarderJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_rules) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["rules"] = jsonArray;
    }
  }

  return val;
}

std::string PbforwarderJsonObject::getName() const {
  return m_name;
}

void PbforwarderJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool PbforwarderJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



const std::vector<PortsJsonObject>& PbforwarderJsonObject::getPorts() const{
  return m_ports;
}

void PbforwarderJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
  m_portsIsSet = true;
}


bool PbforwarderJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void PbforwarderJsonObject::unsetPorts() {
  m_portsIsSet = false;
}

const std::vector<RulesJsonObject>& PbforwarderJsonObject::getRules() const{
  return m_rules;
}

void PbforwarderJsonObject::addRules(RulesJsonObject value) {
  m_rules.push_back(value);
  m_rulesIsSet = true;
}


bool PbforwarderJsonObject::rulesIsSet() const {
  return m_rulesIsSet;
}

void PbforwarderJsonObject::unsetRules() {
  m_rulesIsSet = false;
}


nlohmann::json PbforwarderJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["name"]["name"] = "name";
  val["name"]["type"] = "key";
  val["name"]["simpletype"] = "string";
  val["name"]["description"] = R"POLYCUBE(Name of the pbforwarder service)POLYCUBE";
  val["name"]["example"] = R"POLYCUBE(pbforwarder1)POLYCUBE";

  return val;
}

nlohmann::json PbforwarderJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["uuid"]["name"] = "uuid";
  val["uuid"]["type"] = "leaf"; // Suppose that type is leaf
  val["uuid"]["simpletype"] = "string";
  val["uuid"]["description"] = R"POLYCUBE(UUID of the Cube)POLYCUBE";
  val["uuid"]["example"] = R"POLYCUBE()POLYCUBE";
  val["type"]["name"] = "type";
  val["type"]["type"] = "leaf"; // Suppose that type is leaf
  val["type"]["simpletype"] = "string";
  val["type"]["description"] = R"POLYCUBE(Type of the Cube (TC, XDP_SKB, XDP_DRV))POLYCUBE";
  val["type"]["example"] = R"POLYCUBE(TC)POLYCUBE";
  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["type"] = "leaf"; // Suppose that type is leaf
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";
  val["ports"]["name"] = "ports";
  val["ports"]["type"] = "leaf"; // Suppose that type is leaf
  val["ports"]["type"] = "list";
  val["ports"]["description"] = R"POLYCUBE(Entry of the ports table)POLYCUBE";
  val["ports"]["example"] = R"POLYCUBE()POLYCUBE";
  val["rules"]["name"] = "rules";
  val["rules"]["type"] = "leaf"; // Suppose that type is leaf
  val["rules"]["type"] = "list";
  val["rules"]["description"] = R"POLYCUBE(Rule that contains all possible matches and the action for a packet)POLYCUBE";
  val["rules"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json PbforwarderJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";

  return val;
}

nlohmann::json PbforwarderJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();

  val["ports"]["name"] = "ports";
  val["ports"]["type"] = "list";
  val["ports"]["description"] = R"POLYCUBE(Entry of the ports table)POLYCUBE";
  val["ports"]["example"] = R"POLYCUBE()POLYCUBE";
  val["rules"]["name"] = "rules";
  val["rules"]["type"] = "list";
  val["rules"]["description"] = R"POLYCUBE(Rule that contains all possible matches and the action for a packet)POLYCUBE";
  val["rules"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

std::vector<std::string> PbforwarderJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

}
}
}
}

