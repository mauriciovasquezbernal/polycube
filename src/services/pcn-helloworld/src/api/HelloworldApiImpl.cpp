/**
* helloworld API
* Helloworld Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */


#include "HelloworldApiImpl.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

namespace HelloworldApiImpl {
namespace {
std::unordered_map<std::string, std::shared_ptr<Helloworld>> cubes;
std::mutex cubes_mutex;

std::shared_ptr<Helloworld> get_cube(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  auto iter = cubes.find(name);
  if (iter == cubes.end()) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }

  return iter->second;
}

}

/*
* These functions include a default basic implementation.  The user could
* extend adapt this implementation to his needs.
*/
void create_helloworld_by_id(const std::string &name, const HelloworldJsonObject &jsonObject) {
  {
    // check if name is valid before creating it
    std::lock_guard<std::mutex> guard(cubes_mutex);
    if (cubes.count(name) != 0) {
      throw std::runtime_error("There is already an Cube with name " + name);
    }
  }
  auto ptr = std::make_shared<Helloworld>(name, jsonObject, jsonObject.getType());
  std::unordered_map<std::string, std::shared_ptr<Helloworld>>::iterator iter;
  bool inserted;

  std::lock_guard<std::mutex> guard(cubes_mutex);
  std::tie(iter, inserted) = cubes.emplace(name, std::move(ptr));

  if (!inserted) {
    throw std::runtime_error("There is already an Cube with name " + name);
  }
}

void replace_helloworld_by_id(const std::string &name, const HelloworldJsonObject &bridge){
  throw std::runtime_error("Method not supported!");
}

void delete_helloworld_by_id(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  if (cubes.count(name) == 0) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }
  cubes.erase(name);
}

std::string read_helloworld_uuid_by_id(const std::string &name) {
  auto m = get_cube(name);
  return m->getUuid();
}

std::vector<HelloworldJsonObject> read_helloworld_list_by_id() {
  std::vector<HelloworldJsonObject> jsonObject_vect;
  for(auto &i : cubes) {
    auto m = get_cube(i.first);
    jsonObject_vect.push_back(m->toJsonObject());
  }
  return jsonObject_vect;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_helloworld_list_by_id_get_list() {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  for (auto &x : cubes) {
    nlohmann::fifo_map<std::string, std::string> m;
    m["name"] = x.first;
    r.push_back(std::move(m));
  }
  return r;
}

/*
* Ports list related functions
*/
void create_helloworld_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &ports) {
  auto m = get_cube(name);
  m->addPortsList(ports);
}

std::vector<PortsJsonObject> read_helloworld_ports_list_by_id(const std::string &name) {
  std::vector<PortsJsonObject> vect;
  auto m = get_cube(name);
  for (auto &i : m->getPortsList()) {
    vect.push_back(i->toJsonObject());
  }
  return vect;
}

void replace_helloworld_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &ports) {
  throw std::runtime_error("Method not supported");
}

void delete_helloworld_ports_list_by_id(const std::string &name) {
  auto m = get_cube(name);
  m->delPortsList();
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_helloworld_ports_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto m = get_cube(name);
  for(auto &i : m->getPortsList()){
    nlohmann::fifo_map<std::string, std::string> m;
    m["name"] = i->getName();
    r.push_back(std::move(m));
  }
  return r;
}

/*
* Ports related functions
*/
void create_helloworld_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &ports) {
  auto m = get_cube(name);
  return m->addPorts(portsName, ports);
}

PortsJsonObject read_helloworld_ports_by_id(const std::string &name, const std::string &portsName) {
  auto m = get_cube(name);
  return m->getPorts(portsName)->toJsonObject();
}

void replace_helloworld_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &ports) {
  auto m = get_cube(name);
  m->replacePorts(portsName, ports);
}

void delete_helloworld_ports_by_id(const std::string &name, const std::string &portsName) {
  auto m = get_cube(name);
  m->delPorts(portsName);
}

std::string read_helloworld_ports_peer_by_id(const std::string &name, const std::string &portsName) {
  auto m = get_cube(name);
  auto p = m->getPorts(portsName);
  return p->getPeer();
}

PortsStatusEnum read_helloworld_ports_status_by_id(const std::string &name, const std::string &portsName) {
  auto m = get_cube(name);
  auto p = m->getPorts(portsName);
  return p->getStatus();
}

std::string read_helloworld_ports_uuid_by_id(const std::string &name, const std::string &portsName) {
  auto m = get_cube(name);
  auto p = m->getPorts(portsName);
  return p->getUuid();
}

void update_helloworld_ports_peer_by_id(const std::string &name, const std::string &portsName, const std::string &peer) {
  auto m = get_cube(name);
  auto p = m->getPorts(portsName);
  p->setPeer(peer);
}


/**
* @brief   Read action by ID
*
* Read operation of resource: action*
*
* @param[in] name ID of name
*
* Responses:
* HelloworldActionEnum
*/
HelloworldActionEnum
read_helloworld_action_by_id(const std::string &name) {
  auto helloworld = get_cube(name);
  return helloworld->getAction();

}




/**
* @brief   Read helloworld by ID
*
* Read operation of resource: helloworld*
*
* @param[in] name ID of name
*
* Responses:
* HelloworldJsonObject
*/
HelloworldJsonObject
read_helloworld_by_id(const std::string &name) {
  return get_cube(name)->toJsonObject();

}




/**
* @brief   Read loglevel by ID
*
* Read operation of resource: loglevel*
*
* @param[in] name ID of name
*
* Responses:
* HelloworldLoglevelEnum
*/
HelloworldLoglevelEnum
read_helloworld_loglevel_by_id(const std::string &name) {
  auto helloworld = get_cube(name);
  return helloworld->getLoglevel();

}




/**
* @brief   Read type by ID
*
* Read operation of resource: type*
*
* @param[in] name ID of name
*
* Responses:
* CubeType
*/
CubeType
read_helloworld_type_by_id(const std::string &name) {
  auto helloworld = get_cube(name);
  return helloworld->getType();

}




/**
* @brief   Update action by ID
*
* Update operation of resource: action*
*
* @param[in] name ID of name
* @param[in] value Action performed on the received packet (i.e., DROP, SLOWPATH, or FORWARD; default: DROP)
*
* Responses:
*
*/
void
update_helloworld_action_by_id(const std::string &name, const HelloworldActionEnum &value) {
  auto helloworld = get_cube(name);

  helloworld->setAction(value);
}




/**
* @brief   Update helloworld by ID
*
* Update operation of resource: helloworld*
*
* @param[in] name ID of name
* @param[in] value helloworldbody object
*
* Responses:
*
*/
void
update_helloworld_by_id(const std::string &name, const HelloworldJsonObject &value) {
  auto helloworld = get_cube(name);

  helloworld->update(value);
}




/**
* @brief   Update helloworld by ID
*
* Update operation of resource: helloworld*
*
* @param[in] value helloworldbody object
*
* Responses:
*
*/
void
update_helloworld_list_by_id(const std::vector<HelloworldJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}


#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> update_helloworld_list_by_id_get_list(const std::vector<HelloworldJsonObject> &value) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
}
#endif


/**
* @brief   Update loglevel by ID
*
* Update operation of resource: loglevel*
*
* @param[in] name ID of name
* @param[in] value Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)
*
* Responses:
*
*/
void
update_helloworld_loglevel_by_id(const std::string &name, const HelloworldLoglevelEnum &value) {
  auto helloworld = get_cube(name);

  helloworld->setLoglevel(value);
}




/**
* @brief   Update ports by ID
*
* Update operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
update_helloworld_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) {
  auto helloworld = get_cube(name);
  auto ports = helloworld->getPorts(portsName);

  ports->update(value);
}




/**
* @brief   Update ports by ID
*
* Update operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
update_helloworld_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}


#ifdef IMPLEMENT_POLYCUBE_GET_LIST
std::vector<nlohmann::fifo_map<std::string, std::string>> update_helloworld_ports_list_by_id_get_list(const std::string &name, const std::vector<PortsJsonObject> &value) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
}
#endif


}
}
}
}
}

