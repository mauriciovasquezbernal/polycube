/**
* ddosmitigator API
* DDoS Mitigator Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "DdosmitigatorJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

DdosmitigatorJsonObject::DdosmitigatorJsonObject() :
  m_nameIsSet (false),
  m_uuidIsSet (false),
  m_type (CubeType::TC),
  m_typeIsSet (true),
  m_loglevel (DdosmitigatorLoglevelEnum::INFO),
  m_loglevelIsSet (true),
  m_portsIsSet (false),
  m_statsIsSet (false),
  m_activePortIsSet (false),
  m_redirectPortIsSet (false),
  m_blacklistSrcIsSet (false),
  m_blacklistDstIsSet (false) { }

DdosmitigatorJsonObject::DdosmitigatorJsonObject(nlohmann::json& val) :
  m_nameIsSet (false),
  m_uuidIsSet (false),
  // Item with a default value, granted to be part of the request body
  m_type (string_to_CubeType(val.at("type").get<std::string>())),
  m_typeIsSet (true),
  // Item with a default value, granted to be part of the request body
  m_loglevel (string_to_DdosmitigatorLoglevelEnum(val.at("loglevel").get<std::string>())),
  m_loglevelIsSet (true),
  m_portsIsSet (false),
  m_statsIsSet (false),
  m_activePortIsSet (false),
  m_redirectPortIsSet (false),
  m_blacklistSrcIsSet (false),
  m_blacklistDstIsSet (false) {

  if (val.count("uuid") != 0) {
    setUuid(val.at("uuid").get<std::string>());
  }



  m_ports.clear();
  for (auto& item : val["ports"]) {
    PortsJsonObject newItem { item };
    m_ports.push_back(newItem);
  }
  m_portsIsSet = !m_ports.empty();


  if (val.count("stats") != 0) {


    if (!val["stats"].is_null()) {
      StatsJsonObject newItem { val["stats"] };
      setStats(newItem);
    }
  }

  if (val.count("active-port") != 0) {
    setActivePort(val.at("active-port").get<std::string>());
  }

  if (val.count("redirect-port") != 0) {
    setRedirectPort(val.at("redirect-port").get<std::string>());
  }

  m_blacklistSrc.clear();
  for (auto& item : val["blacklist-src"]) {
    BlacklistSrcJsonObject newItem { item };
    m_blacklistSrc.push_back(newItem);
  }
  m_blacklistSrcIsSet = !m_blacklistSrc.empty();


  m_blacklistDst.clear();
  for (auto& item : val["blacklist-dst"]) {
    BlacklistDstJsonObject newItem { item };
    m_blacklistDst.push_back(newItem);
  }
  m_blacklistDstIsSet = !m_blacklistDst.empty();

}

nlohmann::json DdosmitigatorJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  val["name"] = m_name;
  if (m_uuidIsSet) {
    val["uuid"] = m_uuid;
  }

  if (m_typeIsSet) {
    val["type"] = CubeType_to_string(m_type);
  }

  if (m_loglevelIsSet) {
    val["loglevel"] = DdosmitigatorLoglevelEnum_to_string(m_loglevel);
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }
  if (m_statsIsSet) {
    val["stats"] = JsonObjectBase::toJson(m_stats);
  }
  if (m_activePortIsSet) {
    val["active-port"] = m_activePort;
  }

  if (m_redirectPortIsSet) {
    val["redirect-port"] = m_redirectPort;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_blacklistSrc) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["blacklist-src"] = jsonArray;
    }
  }
  {
    nlohmann::json jsonArray;
    for (auto& item : m_blacklistDst) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["blacklist-dst"] = jsonArray;
    }
  }

  return val;
}

nlohmann::json DdosmitigatorJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["name"]["name"] = "name";
  val["name"]["type"] = "key";
  val["name"]["simpletype"] = "string";
  val["name"]["description"] = R"POLYCUBE(Name of the ddosmitigator service)POLYCUBE";
  val["name"]["example"] = R"POLYCUBE(ddosmitigator1)POLYCUBE";

  return val;
}

nlohmann::json DdosmitigatorJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["uuid"]["name"] = "uuid";
  val["uuid"]["type"] = "leaf"; // Suppose that type is leaf
  val["uuid"]["simpletype"] = "string";
  val["uuid"]["description"] = R"POLYCUBE(UUID of the Cube)POLYCUBE";
  val["uuid"]["example"] = R"POLYCUBE()POLYCUBE";
  val["type"]["name"] = "type";
  val["type"]["type"] = "leaf"; // Suppose that type is leaf
  val["type"]["simpletype"] = "string";
  val["type"]["description"] = R"POLYCUBE(Type of the Cube (TC, XDP_SKB, XDP_DRV))POLYCUBE";
  val["type"]["example"] = R"POLYCUBE(TC)POLYCUBE";
  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["type"] = "leaf"; // Suppose that type is leaf
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";
  val["ports"]["name"] = "ports";
  val["ports"]["type"] = "leaf"; // Suppose that type is leaf
  val["ports"]["type"] = "list";
  val["ports"]["description"] = R"POLYCUBE(Entry of the ports table)POLYCUBE";
  val["ports"]["example"] = R"POLYCUBE()POLYCUBE";
  val["stats"]["name"] = "stats";
  val["stats"]["type"] = "leaf"; // Suppose that type is leaf
  val["stats"]["description"] = R"POLYCUBE()POLYCUBE";
  val["stats"]["example"] = R"POLYCUBE()POLYCUBE";
  val["active-port"]["name"] = "active-port";
  val["active-port"]["type"] = "leaf"; // Suppose that type is leaf
  val["active-port"]["simpletype"] = "string";
  val["active-port"]["description"] = R"POLYCUBE(Port where the traffic is received)POLYCUBE";
  val["active-port"]["example"] = R"POLYCUBE()POLYCUBE";
  val["redirect-port"]["name"] = "redirect-port";
  val["redirect-port"]["type"] = "leaf"; // Suppose that type is leaf
  val["redirect-port"]["simpletype"] = "string";
  val["redirect-port"]["description"] = R"POLYCUBE(If set, this will be the port used to redirect traffic (instead of PASS it to STACK))POLYCUBE";
  val["redirect-port"]["example"] = R"POLYCUBE()POLYCUBE";
  val["blacklist-src"]["name"] = "blacklist-src";
  val["blacklist-src"]["type"] = "leaf"; // Suppose that type is leaf
  val["blacklist-src"]["type"] = "list";
  val["blacklist-src"]["description"] = R"POLYCUBE(Blacklisted source IP addresses)POLYCUBE";
  val["blacklist-src"]["example"] = R"POLYCUBE()POLYCUBE";
  val["blacklist-dst"]["name"] = "blacklist-dst";
  val["blacklist-dst"]["type"] = "leaf"; // Suppose that type is leaf
  val["blacklist-dst"]["type"] = "list";
  val["blacklist-dst"]["description"] = R"POLYCUBE(Blacklisted destination IP addresses)POLYCUBE";
  val["blacklist-dst"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json DdosmitigatorJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";
  val["active-port"]["name"] = "active-port";
  val["active-port"]["simpletype"] = "string";
  val["active-port"]["description"] = R"POLYCUBE(Port where the traffic is received)POLYCUBE";
  val["active-port"]["example"] = R"POLYCUBE()POLYCUBE";
  val["redirect-port"]["name"] = "redirect-port";
  val["redirect-port"]["simpletype"] = "string";
  val["redirect-port"]["description"] = R"POLYCUBE(If set, this will be the port used to redirect traffic (instead of PASS it to STACK))POLYCUBE";
  val["redirect-port"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json DdosmitigatorJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();

  val["ports"]["name"] = "ports";
  val["ports"]["type"] = "list";
  val["ports"]["description"] = R"POLYCUBE(Entry of the ports table)POLYCUBE";
  val["ports"]["example"] = R"POLYCUBE()POLYCUBE";
  val["stats"]["name"] = "stats";
  val["stats"]["type"] = "complex";
  val["stats"]["description"] = R"POLYCUBE()POLYCUBE";
  val["stats"]["example"] = R"POLYCUBE()POLYCUBE";
  val["blacklist-src"]["name"] = "blacklist-src";
  val["blacklist-src"]["type"] = "list";
  val["blacklist-src"]["description"] = R"POLYCUBE(Blacklisted source IP addresses)POLYCUBE";
  val["blacklist-src"]["example"] = R"POLYCUBE()POLYCUBE";
  val["blacklist-dst"]["name"] = "blacklist-dst";
  val["blacklist-dst"]["type"] = "list";
  val["blacklist-dst"]["description"] = R"POLYCUBE(Blacklisted destination IP addresses)POLYCUBE";
  val["blacklist-dst"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

std::vector<std::string> DdosmitigatorJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

std::string DdosmitigatorJsonObject::getName() const {
  return m_name;
}

void DdosmitigatorJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool DdosmitigatorJsonObject::nameIsSet() const {
  return m_nameIsSet;
}





std::string DdosmitigatorJsonObject::getUuid() const {
  return m_uuid;
}

void DdosmitigatorJsonObject::setUuid(std::string value) {
  m_uuid = value;
  m_uuidIsSet = true;
}

bool DdosmitigatorJsonObject::uuidIsSet() const {
  return m_uuidIsSet;
}

void DdosmitigatorJsonObject::unsetUuid() {
  m_uuidIsSet = false;
}



CubeType DdosmitigatorJsonObject::getType() const {
  return m_type;
}

void DdosmitigatorJsonObject::setType(CubeType value) {
  m_type = value;
  m_typeIsSet = true;
}

bool DdosmitigatorJsonObject::typeIsSet() const {
  return m_typeIsSet;
}

void DdosmitigatorJsonObject::unsetType() {
  m_typeIsSet = false;
}

std::string DdosmitigatorJsonObject::CubeType_to_string(const CubeType &value){
  switch(value){
    case CubeType::TC:
      return std::string("tc");
    case CubeType::XDP_SKB:
      return std::string("xdp_skb");
    case CubeType::XDP_DRV:
      return std::string("xdp_drv");
    default:
      throw std::runtime_error("Bad Ddosmitigator type");
  }
}

CubeType DdosmitigatorJsonObject::string_to_CubeType(const std::string &str){
  if (JsonObjectBase::iequals("tc", str))
    return CubeType::TC;
  if (JsonObjectBase::iequals("xdp_skb", str))
    return CubeType::XDP_SKB;
  if (JsonObjectBase::iequals("xdp_drv", str))
    return CubeType::XDP_DRV;
  throw std::runtime_error("Ddosmitigator type is invalid");
}


DdosmitigatorLoglevelEnum DdosmitigatorJsonObject::getLoglevel() const {
  return m_loglevel;
}

void DdosmitigatorJsonObject::setLoglevel(DdosmitigatorLoglevelEnum value) {
  m_loglevel = value;
  m_loglevelIsSet = true;
}

bool DdosmitigatorJsonObject::loglevelIsSet() const {
  return m_loglevelIsSet;
}

void DdosmitigatorJsonObject::unsetLoglevel() {
  m_loglevelIsSet = false;
}

std::string DdosmitigatorJsonObject::DdosmitigatorLoglevelEnum_to_string(const DdosmitigatorLoglevelEnum &value){
  switch(value){
    case DdosmitigatorLoglevelEnum::TRACE:
      return std::string("trace");
    case DdosmitigatorLoglevelEnum::DEBUG:
      return std::string("debug");
    case DdosmitigatorLoglevelEnum::INFO:
      return std::string("info");
    case DdosmitigatorLoglevelEnum::WARN:
      return std::string("warn");
    case DdosmitigatorLoglevelEnum::ERR:
      return std::string("err");
    case DdosmitigatorLoglevelEnum::CRITICAL:
      return std::string("critical");
    case DdosmitigatorLoglevelEnum::OFF:
      return std::string("off");
    default:
      throw std::runtime_error("Bad Ddosmitigator loglevel");
  }
}

DdosmitigatorLoglevelEnum DdosmitigatorJsonObject::string_to_DdosmitigatorLoglevelEnum(const std::string &str){
  if (JsonObjectBase::iequals("trace", str))
    return DdosmitigatorLoglevelEnum::TRACE;
  if (JsonObjectBase::iequals("debug", str))
    return DdosmitigatorLoglevelEnum::DEBUG;
  if (JsonObjectBase::iequals("info", str))
    return DdosmitigatorLoglevelEnum::INFO;
  if (JsonObjectBase::iequals("warn", str))
    return DdosmitigatorLoglevelEnum::WARN;
  if (JsonObjectBase::iequals("err", str))
    return DdosmitigatorLoglevelEnum::ERR;
  if (JsonObjectBase::iequals("critical", str))
    return DdosmitigatorLoglevelEnum::CRITICAL;
  if (JsonObjectBase::iequals("off", str))
    return DdosmitigatorLoglevelEnum::OFF;
  throw std::runtime_error("Ddosmitigator loglevel is invalid");
}

  polycube::LogLevel DdosmitigatorJsonObject::getPolycubeLoglevel() const {
    switch(m_loglevel) {
      case DdosmitigatorLoglevelEnum::TRACE:
        return polycube::LogLevel::TRACE;
      case DdosmitigatorLoglevelEnum::DEBUG:
        return polycube::LogLevel::DEBUG;
      case DdosmitigatorLoglevelEnum::INFO:
        return polycube::LogLevel::INFO;
      case DdosmitigatorLoglevelEnum::WARN:
        return polycube::LogLevel::WARN;
      case DdosmitigatorLoglevelEnum::ERR:
        return polycube::LogLevel::ERR;
      case DdosmitigatorLoglevelEnum::CRITICAL:
        return polycube::LogLevel::CRITICAL;
      case DdosmitigatorLoglevelEnum::OFF:
        return polycube::LogLevel::OFF;
    }
  }
const std::vector<PortsJsonObject>& DdosmitigatorJsonObject::getPorts() const{
  return m_ports;
}

void DdosmitigatorJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
}


bool DdosmitigatorJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void DdosmitigatorJsonObject::unsetPorts() {
  m_portsIsSet = false;
}



StatsJsonObject DdosmitigatorJsonObject::getStats() const {
  return m_stats;
}

void DdosmitigatorJsonObject::setStats(StatsJsonObject value) {
  m_stats = value;
  m_statsIsSet = true;
}

bool DdosmitigatorJsonObject::statsIsSet() const {
  return m_statsIsSet;
}

void DdosmitigatorJsonObject::unsetStats() {
  m_statsIsSet = false;
}



std::string DdosmitigatorJsonObject::getActivePort() const {
  return m_activePort;
}

void DdosmitigatorJsonObject::setActivePort(std::string value) {
  m_activePort = value;
  m_activePortIsSet = true;
}

bool DdosmitigatorJsonObject::activePortIsSet() const {
  return m_activePortIsSet;
}

void DdosmitigatorJsonObject::unsetActivePort() {
  m_activePortIsSet = false;
}



std::string DdosmitigatorJsonObject::getRedirectPort() const {
  return m_redirectPort;
}

void DdosmitigatorJsonObject::setRedirectPort(std::string value) {
  m_redirectPort = value;
  m_redirectPortIsSet = true;
}

bool DdosmitigatorJsonObject::redirectPortIsSet() const {
  return m_redirectPortIsSet;
}

void DdosmitigatorJsonObject::unsetRedirectPort() {
  m_redirectPortIsSet = false;
}



const std::vector<BlacklistSrcJsonObject>& DdosmitigatorJsonObject::getBlacklistSrc() const{
  return m_blacklistSrc;
}

void DdosmitigatorJsonObject::addBlacklistSrc(BlacklistSrcJsonObject value) {
  m_blacklistSrc.push_back(value);
}


bool DdosmitigatorJsonObject::blacklistSrcIsSet() const {
  return m_blacklistSrcIsSet;
}

void DdosmitigatorJsonObject::unsetBlacklistSrc() {
  m_blacklistSrcIsSet = false;
}



const std::vector<BlacklistDstJsonObject>& DdosmitigatorJsonObject::getBlacklistDst() const{
  return m_blacklistDst;
}

void DdosmitigatorJsonObject::addBlacklistDst(BlacklistDstJsonObject value) {
  m_blacklistDst.push_back(value);
}


bool DdosmitigatorJsonObject::blacklistDstIsSet() const {
  return m_blacklistDstIsSet;
}

void DdosmitigatorJsonObject::unsetBlacklistDst() {
  m_blacklistDstIsSet = false;
}




}
}
}
}


