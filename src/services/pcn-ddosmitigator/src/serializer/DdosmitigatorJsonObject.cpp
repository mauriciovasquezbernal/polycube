/**
* ddosmitigator API
* ddosmitigator API generated from ddosmitigator.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "DdosmitigatorJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

DdosmitigatorJsonObject::DdosmitigatorJsonObject() {
  m_nameIsSet = false;
  m_statsIsSet = false;
  m_blacklistSrcIsSet = false;
  m_blacklistDstIsSet = false;
}

DdosmitigatorJsonObject::DdosmitigatorJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_statsIsSet = false;
  m_blacklistSrcIsSet = false;
  m_blacklistDstIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("stats")) {
    if (!val["stats"].is_null()) {
      StatsJsonObject newItem { val["stats"] };
      setStats(newItem);
    }
  }

  if (val.count("blacklist-src")) {
    for (auto& item : val["blacklist-src"]) {
      BlacklistSrcJsonObject newItem{ item };
      m_blacklistSrc.push_back(newItem);
    }

    m_blacklistSrcIsSet = true;
  }

  if (val.count("blacklist-dst")) {
    for (auto& item : val["blacklist-dst"]) {
      BlacklistDstJsonObject newItem{ item };
      m_blacklistDst.push_back(newItem);
    }

    m_blacklistDstIsSet = true;
  }
}

nlohmann::json DdosmitigatorJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_statsIsSet) {
    val["stats"] = JsonObjectBase::toJson(m_stats);
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_blacklistSrc) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["blacklist-src"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_blacklistDst) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["blacklist-dst"] = jsonArray;
    }
  }

  return val;
}

std::string DdosmitigatorJsonObject::getName() const {
  return m_name;
}

void DdosmitigatorJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool DdosmitigatorJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



StatsJsonObject DdosmitigatorJsonObject::getStats() const {
  return m_stats;
}

void DdosmitigatorJsonObject::setStats(StatsJsonObject value) {
  m_stats = value;
  m_statsIsSet = true;
}

bool DdosmitigatorJsonObject::statsIsSet() const {
  return m_statsIsSet;
}

void DdosmitigatorJsonObject::unsetStats() {
  m_statsIsSet = false;
}

const std::vector<BlacklistSrcJsonObject>& DdosmitigatorJsonObject::getBlacklistSrc() const{
  return m_blacklistSrc;
}

void DdosmitigatorJsonObject::addBlacklistSrc(BlacklistSrcJsonObject value) {
  m_blacklistSrc.push_back(value);
  m_blacklistSrcIsSet = true;
}


bool DdosmitigatorJsonObject::blacklistSrcIsSet() const {
  return m_blacklistSrcIsSet;
}

void DdosmitigatorJsonObject::unsetBlacklistSrc() {
  m_blacklistSrcIsSet = false;
}

const std::vector<BlacklistDstJsonObject>& DdosmitigatorJsonObject::getBlacklistDst() const{
  return m_blacklistDst;
}

void DdosmitigatorJsonObject::addBlacklistDst(BlacklistDstJsonObject value) {
  m_blacklistDst.push_back(value);
  m_blacklistDstIsSet = true;
}


bool DdosmitigatorJsonObject::blacklistDstIsSet() const {
  return m_blacklistDstIsSet;
}

void DdosmitigatorJsonObject::unsetBlacklistDst() {
  m_blacklistDstIsSet = false;
}


nlohmann::json DdosmitigatorJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["name"]["name"] = "name";
  val["name"]["type"] = "key";
  val["name"]["simpletype"] = "string";
  val["name"]["description"] = R"POLYCUBE(Name of the ddosmitigator service)POLYCUBE";
  val["name"]["example"] = R"POLYCUBE(ddosmitigator1)POLYCUBE";

  return val;
}

nlohmann::json DdosmitigatorJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["uuid"]["name"] = "uuid";
  val["uuid"]["type"] = "leaf"; // Suppose that type is leaf
  val["uuid"]["simpletype"] = "string";
  val["uuid"]["description"] = R"POLYCUBE(UUID of the Cube)POLYCUBE";
  val["uuid"]["example"] = R"POLYCUBE()POLYCUBE";
  val["type"]["name"] = "type";
  val["type"]["type"] = "leaf"; // Suppose that type is leaf
  val["type"]["simpletype"] = "string";
  val["type"]["description"] = R"POLYCUBE(Type of the Cube (TC, XDP_SKB, XDP_DRV))POLYCUBE";
  val["type"]["example"] = R"POLYCUBE(TC)POLYCUBE";
  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["type"] = "leaf"; // Suppose that type is leaf
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";
  val["stats"]["name"] = "stats";
  val["stats"]["type"] = "leaf"; // Suppose that type is leaf
  val["stats"]["description"] = R"POLYCUBE()POLYCUBE";
  val["stats"]["example"] = R"POLYCUBE()POLYCUBE";
  val["blacklist-src"]["name"] = "blacklist-src";
  val["blacklist-src"]["type"] = "leaf"; // Suppose that type is leaf
  val["blacklist-src"]["type"] = "list";
  val["blacklist-src"]["description"] = R"POLYCUBE(Blacklisted source IP addresses)POLYCUBE";
  val["blacklist-src"]["example"] = R"POLYCUBE()POLYCUBE";
  val["blacklist-dst"]["name"] = "blacklist-dst";
  val["blacklist-dst"]["type"] = "leaf"; // Suppose that type is leaf
  val["blacklist-dst"]["type"] = "list";
  val["blacklist-dst"]["description"] = R"POLYCUBE(Blacklisted destination IP addresses)POLYCUBE";
  val["blacklist-dst"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json DdosmitigatorJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";

  return val;
}

nlohmann::json DdosmitigatorJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();

  val["stats"]["name"] = "stats";
  val["stats"]["type"] = "complex";
  val["stats"]["description"] = R"POLYCUBE()POLYCUBE";
  val["stats"]["example"] = R"POLYCUBE()POLYCUBE";
  val["blacklist-src"]["name"] = "blacklist-src";
  val["blacklist-src"]["type"] = "list";
  val["blacklist-src"]["description"] = R"POLYCUBE(Blacklisted source IP addresses)POLYCUBE";
  val["blacklist-src"]["example"] = R"POLYCUBE()POLYCUBE";
  val["blacklist-dst"]["name"] = "blacklist-dst";
  val["blacklist-dst"]["type"] = "list";
  val["blacklist-dst"]["description"] = R"POLYCUBE(Blacklisted destination IP addresses)POLYCUBE";
  val["blacklist-dst"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

std::vector<std::string> DdosmitigatorJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

}
}
}
}

