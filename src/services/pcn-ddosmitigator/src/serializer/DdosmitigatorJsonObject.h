/**
* ddosmitigator API
* DDoS Mitigator Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* DdosmitigatorJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "BlacklistDstJsonObject.h"
#include "StatsJsonObject.h"
#include "BlacklistSrcJsonObject.h"
#include <vector>
#include "polycube/services/cube.h"

using polycube::service::CubeType;

namespace io {
namespace swagger {
namespace server {
namespace model {

enum class DdosmitigatorLoglevelEnum {
  TRACE, DEBUG, INFO, WARN, ERR, CRITICAL, OFF
};

/// <summary>
///
/// </summary>
class  DdosmitigatorJsonObject : public JsonObjectBase {
public:
  DdosmitigatorJsonObject();
  virtual ~DdosmitigatorJsonObject();

  /////////////////////////////////////////////
  /// JsonObjectBase overrides

  void validateKeys() override;
  void validateMandatoryFields() override;
  void validateParams() override;

  nlohmann::json toJson() const override;
  void fromJson(nlohmann::json& json) override;

  static nlohmann::json helpKeys();
  static nlohmann::json helpElements();
  static nlohmann::json helpWritableLeafs();
  static nlohmann::json helpComplexElements();
  static std::vector<std::string> helpActions();
  /////////////////////////////////////////////
  /// DdosmitigatorJsonObject members

  /// <summary>
  /// Name of the ddosmitigator service
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;
  void unsetName();

  /// <summary>
  /// UUID of the Cube
  /// </summary>
  std::string getUuid() const;
  void setUuid(std::string value);
  bool uuidIsSet() const;
  void unsetUuid();

  /// <summary>
  /// Type of the Cube (TC, XDP_SKB, XDP_DRV)
  /// </summary>
  CubeType getType() const;
  void setType(CubeType value);
  bool typeIsSet() const;
  void unsetType();
  static std::string CubeType_to_string(const CubeType &value);
  static CubeType string_to_CubeType(const std::string &str);

  /// <summary>
  /// Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)
  /// </summary>
  DdosmitigatorLoglevelEnum getLoglevel() const;
  void setLoglevel(DdosmitigatorLoglevelEnum value);
  bool loglevelIsSet() const;
  void unsetLoglevel();
  static std::string DdosmitigatorLoglevelEnum_to_string(const DdosmitigatorLoglevelEnum &value);
  static DdosmitigatorLoglevelEnum string_to_DdosmitigatorLoglevelEnum(const std::string &str);
  polycube::LogLevel getPolycubeLoglevel() const;

  /// <summary>
  ///
  /// </summary>
  StatsJsonObject getStats() const;
  void setStats(StatsJsonObject value);
  bool statsIsSet() const;
  void unsetStats();

  /// <summary>
  /// If set, this will be the port used to redirect traffic (instead of PASS it to STACK)
  /// </summary>
  std::string getRedirectPort() const;
  void setRedirectPort(std::string value);
  bool redirectPortIsSet() const;
  void unsetRedirectPort();

  /// <summary>
  /// Blacklisted source IP addresses
  /// </summary>
  const std::vector<BlacklistSrcJsonObject>& getBlacklistSrc() const;
  void addBlacklistSrc(BlacklistSrcJsonObject value);
  bool blacklistSrcIsSet() const;
  void unsetBlacklistSrc();

  /// <summary>
  /// Blacklisted destination IP addresses
  /// </summary>
  const std::vector<BlacklistDstJsonObject>& getBlacklistDst() const;
  void addBlacklistDst(BlacklistDstJsonObject value);
  bool blacklistDstIsSet() const;
  void unsetBlacklistDst();


protected:
  std::string m_name;
  bool m_nameIsSet;
  std::string m_uuid;
  bool m_uuidIsSet;
  CubeType m_type;
  bool m_typeIsSet;
  DdosmitigatorLoglevelEnum m_loglevel;
  bool m_loglevelIsSet;
  StatsJsonObject m_stats;
  bool m_statsIsSet;
  std::string m_redirectPort;
  bool m_redirectPortIsSet;
  std::vector<BlacklistSrcJsonObject> m_blacklistSrc;
  bool m_blacklistSrcIsSet;
  std::vector<BlacklistDstJsonObject> m_blacklistDst;
  bool m_blacklistDstIsSet;

  std::vector<std::string> allowedParameters_{ "name", "uuid", "type", "loglevel", "stats", "active-port", "redirect-port", "blacklist-src", "blacklist-dst" };
};

}
}
}
}

