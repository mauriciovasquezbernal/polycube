/**
 * bridge API generated from bridge.yang
 *
 * NOTE: This file is auto generated by polycube-codegen
 * https://github.com/polycube-network/polycube-codegen
 */

// TODO: Modify these methods with your own implementation

#include "Bridge.h"
#include "Bridge_dp.h"

Bridge::Bridge(const std::string name, const BridgeJsonObject &conf)
    : Cube(conf.getBase(), {bridge_code}, {}), BridgeBase(name) {
  logger()->info("Creating Bridge instance");
  addPortsList(conf.getPorts());
  auto value = conf.getFdb();
  addFdb(conf.getFdb());
  setStpEnabled(conf.getStpEnabled());
  if (conf.macIsSet()) {
    setMac(conf.getMac());
  }

  addStpList(conf.getStp());
}

Bridge::~Bridge() {
  logger()->info("Destroying Bridge instance");
}

void Bridge::packet_in(Ports &port, polycube::service::PacketInMetadata &md,
                       const std::vector<uint8_t> &packet) {
  logger()->debug("Packet received from port {0}", port.name());
}

// Basic default implementation, place your extension here (if needed)
std::shared_ptr<Ports> Bridge::getPorts(const std::string &name) {
  // call default implementation in base class
  return BridgeBase::getPorts(name);
}

// Basic default implementation, place your extension here (if needed)
std::vector<std::shared_ptr<Ports>> Bridge::getPortsList() {
  // call default implementation in base class
  return BridgeBase::getPortsList();
}

// Basic default implementation, place your extension here (if needed)
void Bridge::addPorts(const std::string &name, const PortsJsonObject &conf) {
  BridgeBase::addPorts(name, conf);
}

// Basic default implementation, place your extension here (if needed)
void Bridge::addPortsList(const std::vector<PortsJsonObject> &conf) {
  // call default implementation in base class
  BridgeBase::addPortsList(conf);
}

// Basic default implementation, place your extension here (if needed)
void Bridge::replacePorts(const std::string &name,
                          const PortsJsonObject &conf) {
  // call default implementation in base class
  BridgeBase::replacePorts(name, conf);
}

// Basic default implementation, place your extension here (if needed)
void Bridge::delPorts(const std::string &name) {
  // call default implementation in base class
  BridgeBase::delPorts(name);
}

// Basic default implementation, place your extension here (if needed)
void Bridge::delPortsList() {
  // call default implementation in base class
  BridgeBase::delPortsList();
}

std::shared_ptr<Fdb> Bridge::getFdb() {
  throw std::runtime_error("Bridge::getFdb: Method not implemented");
}

void Bridge::addFdb(const FdbJsonObject &value) {
  throw std::runtime_error("Bridge::addFdb: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void Bridge::replaceFdb(const FdbJsonObject &conf) {
  // call default implementation in base class
  BridgeBase::replaceFdb(conf);
}

void Bridge::delFdb() {
  throw std::runtime_error("Bridge::delFdb: method not implemented");
}

bool Bridge::getStpEnabled() {
  throw std::runtime_error("Bridge::getStpEnabled: Method not implemented");
}

void Bridge::setStpEnabled(const bool &value) {
  throw std::runtime_error("Bridge::setStpEnabled: Method not implemented");
}

std::string Bridge::getMac() {
  throw std::runtime_error("Bridge::getMac: Method not implemented");
}

void Bridge::setMac(const std::string &value) {
  throw std::runtime_error("Bridge::setMac: Method not implemented");
}
std::shared_ptr<Stp> Bridge::getStp(const uint16_t &vlan) {
  throw std::runtime_error("Bridge::getEntry: Method not implemented");
}

std::vector<std::shared_ptr<Stp>> Bridge::getStpList() {
  throw std::runtime_error("Bridge::getStpList: Method not implemented");
}

void Bridge::addStp(const uint16_t &vlan, const StpJsonObject &conf) {
  throw std::runtime_error("Bridge::addStp: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void Bridge::addStpList(const std::vector<StpJsonObject> &conf) {
  // call default implementation in base class
  BridgeBase::addStpList(conf);
}

// Basic default implementation, place your extension here (if needed)
void Bridge::replaceStp(const uint16_t &vlan, const StpJsonObject &conf) {
  // call default implementation in base class
  BridgeBase::replaceStp(vlan, conf);
}

void Bridge::delStp(const uint16_t &vlan) {
  throw std::runtime_error("Bridge::delStp: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void Bridge::delStpList() {
  // call default implementation in base class
  BridgeBase::delStpList();
}
