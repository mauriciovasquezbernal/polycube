/**
 * bridge API generated from bridge.yang
 *
 * NOTE: This file is auto generated by polycube-codegen
 * https://github.com/polycube-network/polycube-codegen
 */

#pragma once

#include "../base/BridgeBase.h"

#include "Fdb.h"
#include "Ports.h"
#include "Stp.h"

using namespace polycube::service::model;

class Bridge : public BridgeBase {
 public:
  Bridge(const std::string name, const BridgeJsonObject &conf);
  virtual ~Bridge();

  void packet_in(Ports &port, polycube::service::PacketInMetadata &md,
                 const std::vector<uint8_t> &packet) override;

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  std::shared_ptr<Ports> getPorts(const std::string &name) override;
  std::vector<std::shared_ptr<Ports>> getPortsList() override;
  void addPorts(const std::string &name, const PortsJsonObject &conf) override;
  void addPortsList(const std::vector<PortsJsonObject> &conf) override;
  void replacePorts(const std::string &name,
                    const PortsJsonObject &conf) override;
  void delPorts(const std::string &name) override;
  void delPortsList() override;

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Fdb> getFdb() override;
  void addFdb(const FdbJsonObject &value) override;
  void replaceFdb(const FdbJsonObject &conf) override;
  void delFdb() override;

  /// <summary>
  /// Enable/Disable the STP protocol of the bridge
  /// </summary>
  bool getStpEnabled() override;
  void setStpEnabled(const bool &value) override;

  /// <summary>
  /// Main MAC address of the bridge used by the STP
  /// </summary>
  std::string getMac() override;
  void setMac(const std::string &value) override;

  /// <summary>
  /// Per-vlan Spanning Tree Protocol Configuration
  /// </summary>
  std::shared_ptr<Stp> getStp(const uint16_t &vlan) override;
  std::vector<std::shared_ptr<Stp>> getStpList() override;
  void addStp(const uint16_t &vlan, const StpJsonObject &conf) override;
  void addStpList(const std::vector<StpJsonObject> &conf) override;
  void replaceStp(const uint16_t &vlan, const StpJsonObject &conf) override;
  void delStp(const uint16_t &vlan) override;
  void delStpList() override;
};
