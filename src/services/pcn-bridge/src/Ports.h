/**
 * bridge API generated from bridge.yang
 *
 * NOTE: This file is auto generated by polycube-codegen
 * https://github.com/polycube-network/polycube-codegen
 */

#pragma once

#include "../base/PortsBase.h"

#include "PortsAccess.h"
#include "PortsStp.h"
#include "PortsTrunk.h"

class Bridge;

using namespace polycube::service::model;

class Ports : public PortsBase {
 public:
  Ports(polycube::service::Cube<Ports> &parent,
        std::shared_ptr<polycube::service::PortIface> port,
        const PortsJsonObject &conf);
  virtual ~Ports();

  /// <summary>
  /// MAC address of the port
  /// </summary>
  std::string getMac() override;

  /// <summary>
  /// Type of bridge interface: access/trunk
  /// </summary>
  PortsModeEnum getMode() override;
  void setMode(const PortsModeEnum &value) override;

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<PortsAccess> getAccess() override;
  void addAccess(const PortsAccessJsonObject &value) override;
  void replaceAccess(const PortsAccessJsonObject &conf) override;
  void delAccess() override;

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<PortsTrunk> getTrunk() override;
  void addTrunk(const PortsTrunkJsonObject &value) override;
  void replaceTrunk(const PortsTrunkJsonObject &conf) override;
  void delTrunk() override;

  /// <summary>
  /// Per-vlan Spanning Tree Protocol Port Configuration
  /// </summary>
  std::shared_ptr<PortsStp> getStp(const uint16_t &vlan) override;
  std::vector<std::shared_ptr<PortsStp>> getStpList() override;
  void addStp(const uint16_t &vlan, const PortsStpJsonObject &conf) override;
  void addStpList(const std::vector<PortsStpJsonObject> &conf) override;
  void replaceStp(const uint16_t &vlan,
                  const PortsStpJsonObject &conf) override;
  void delStp(const uint16_t &vlan) override;
  void delStpList() override;
};
