/**
 * bridge API generated from bridge.yang
 *
 * NOTE: This file is auto generated by polycube-codegen
 * https://github.com/polycube-network/polycube-codegen
 */

#pragma once

#include "../base/FdbBase.h"

#include "FdbEntry.h"

class Bridge;

using namespace polycube::service::model;

class Fdb : public FdbBase {
 public:
  Fdb(Bridge &parent, const FdbJsonObject &conf);
  virtual ~Fdb();

  /// <summary>
  /// Aging time of the filtering database (in seconds)
  /// </summary>
  uint32_t getAgingTime() override;
  void setAgingTime(const uint32_t &value) override;

  /// <summary>
  /// Entry associated with the filtering database
  /// </summary>
  std::shared_ptr<FdbEntry> getEntry(const uint16_t &vlan,
                                     const std::string &mac) override;
  std::vector<std::shared_ptr<FdbEntry>> getEntryList() override;
  void addEntry(const uint16_t &vlan, const std::string &mac,
                const FdbEntryJsonObject &conf) override;
  void addEntryList(const std::vector<FdbEntryJsonObject> &conf) override;
  void replaceEntry(const uint16_t &vlan, const std::string &mac,
                    const FdbEntryJsonObject &conf) override;
  void delEntry(const uint16_t &vlan, const std::string &mac) override;
  void delEntryList() override;

  void flush() override;
};
