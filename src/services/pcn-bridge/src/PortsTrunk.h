/**
 * bridge API generated from bridge.yang
 *
 * NOTE: This file is auto generated by polycube-codegen
 * https://github.com/polycube-network/polycube-codegen
 */

#pragma once

#include "../base/PortsTrunkBase.h"

#include "PortsTrunkAllowed.h"

class Ports;

using namespace polycube::service::model;

class PortsTrunk : public PortsTrunkBase {
 public:
  PortsTrunk(Ports &parent, const PortsTrunkJsonObject &conf);
  virtual ~PortsTrunk();

  /// <summary>
  /// Allowed vlans
  /// </summary>
  std::shared_ptr<PortsTrunkAllowed> getAllowed(
      const uint16_t &vlanid) override;
  std::vector<std::shared_ptr<PortsTrunkAllowed>> getAllowedList() override;
  void addAllowed(const uint16_t &vlanid,
                  const PortsTrunkAllowedJsonObject &conf) override;
  void addAllowedList(
      const std::vector<PortsTrunkAllowedJsonObject> &conf) override;
  void replaceAllowed(const uint16_t &vlanid,
                      const PortsTrunkAllowedJsonObject &conf) override;
  void delAllowed(const uint16_t &vlanid) override;
  void delAllowedList() override;

  /// <summary>
  /// Enable/Disable the native vlan feature in this trunk port
  /// </summary>
  bool getNativeVlanEnabled() override;
  void setNativeVlanEnabled(const bool &value) override;

  /// <summary>
  /// VLAN that is not tagged in this trunk port
  /// </summary>
  uint16_t getNativeVlan() override;
  void setNativeVlan(const uint16_t &value) override;
};
