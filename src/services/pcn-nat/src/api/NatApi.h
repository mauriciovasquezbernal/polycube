/**
* nat API
* NAT Service
*
* OpenAPI spec version: 1.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* NatApi.h
*
*/

#pragma once

#define POLYCUBE_SERVICE_NAME "nat"


#include <polycube/services/http_router.h>
#include <polycube/services/management_interface.h>
#include <vector>

#include "NattingTableJsonObject.h"
#include "RuleJsonObject.h"
#include "RuleDnatJsonObject.h"
#include "RuleDnatAppendInputJsonObject.h"
#include "RuleDnatAppendOutputJsonObject.h"
#include "RuleDnatEntryJsonObject.h"
#include "RuleMasqueradeJsonObject.h"
#include "RuleMasqueradeDisableOutputJsonObject.h"
#include "RuleMasqueradeEnableOutputJsonObject.h"
#include "RulePortForwardingJsonObject.h"
#include "RulePortForwardingAppendInputJsonObject.h"
#include "RulePortForwardingAppendOutputJsonObject.h"
#include "RulePortForwardingEntryJsonObject.h"
#include "RuleSnatJsonObject.h"
#include "RuleSnatAppendInputJsonObject.h"
#include "RuleSnatAppendOutputJsonObject.h"
#include "RuleSnatEntryJsonObject.h"
#include "NatJsonObject.h"
#include <vector>

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;
using namespace polycube::service;

class  NatApi : public ManagementInterface {
 public:
  NatApi();
  virtual ~NatApi() {};

  const std::string base = "/" + std::string(POLYCUBE_SERVICE_NAME) + "/";

 protected:
  void setup_routes();
  void control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) override;

  void create_nat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_natting_table_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_natting_table_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_dnat_append_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_dnat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_dnat_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_dnat_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_masquerade_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_masquerade_disable_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_masquerade_enable_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_port_forwarding_append_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_port_forwarding_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_port_forwarding_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_port_forwarding_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_snat_append_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_snat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_snat_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_snat_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_natting_table_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_natting_table_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_rule_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_rule_dnat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_rule_dnat_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_rule_dnat_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_rule_masquerade_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_rule_port_forwarding_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_rule_port_forwarding_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_rule_port_forwarding_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_rule_snat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_rule_snat_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void delete_nat_rule_snat_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_loglevel_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_natting_table_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_natting_table_external_ip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_natting_table_external_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_natting_table_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_natting_table_originating_rule_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_dnat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_dnat_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_dnat_entry_external_ip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_dnat_entry_internal_ip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_dnat_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_masquerade_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_masquerade_enabled_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_port_forwarding_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_port_forwarding_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_port_forwarding_entry_external_ip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_port_forwarding_entry_external_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_port_forwarding_entry_internal_ip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_port_forwarding_entry_internal_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_port_forwarding_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_port_forwarding_entry_proto_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_snat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_snat_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_snat_entry_external_ip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_snat_entry_internal_net_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_snat_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_type_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_uuid_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_natting_table_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_natting_table_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_rule_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_rule_dnat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_rule_dnat_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_rule_dnat_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_rule_masquerade_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_rule_port_forwarding_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_rule_port_forwarding_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_rule_port_forwarding_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_rule_snat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_rule_snat_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void replace_nat_rule_snat_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_loglevel_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_natting_table_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_natting_table_external_ip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_natting_table_external_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_natting_table_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_natting_table_originating_rule_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_dnat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_dnat_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_dnat_entry_external_ip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_dnat_entry_internal_ip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_dnat_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_masquerade_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_masquerade_enabled_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_port_forwarding_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_port_forwarding_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_port_forwarding_entry_external_ip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_port_forwarding_entry_external_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_port_forwarding_entry_internal_ip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_port_forwarding_entry_internal_port_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_port_forwarding_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_port_forwarding_entry_proto_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_snat_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_snat_entry_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_snat_entry_external_ip_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_snat_entry_internal_net_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void update_nat_rule_snat_entry_list_by_id_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);

  void read_nat_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_natting_table_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_natting_table_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_dnat_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_dnat_entry_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_dnat_entry_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_masquerade_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_port_forwarding_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_port_forwarding_entry_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_port_forwarding_entry_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_snat_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_snat_entry_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void read_nat_rule_snat_entry_list_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);

  void create_nat_rule_dnat_append_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_masquerade_disable_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_masquerade_enable_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_port_forwarding_append_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  void create_nat_rule_snat_append_by_id_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);

  polycube::service::Rest::Router router;

  /// <summary>
  /// Create nat by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: nat
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">natbody object</param>
  virtual void create_nat_by_id(const std::string &name, const NatJsonObject &value) = 0;
  /// <summary>
  /// Create natting-table by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: natting-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="internalSrc">ID of internal-src</param>
  /// <param name="internalDst">ID of internal-dst</param>
  /// <param name="internalSport">ID of internal-sport</param>
  /// <param name="internalDport">ID of internal-dport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">natting-tablebody object</param>
  virtual void create_nat_natting_table_by_id(const std::string &name, const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const NattingTableJsonObject &value) = 0;
  /// <summary>
  /// Create natting-table by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: natting-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">natting-tablebody object</param>
  virtual void create_nat_natting_table_list_by_id(const std::string &name, const std::vector<NattingTableJsonObject> &value) = 0;
  /// <summary>
  /// Create rule by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">rulebody object</param>
  virtual void create_nat_rule_by_id(const std::string &name, const RuleJsonObject &value) = 0;
  /// <summary>
  /// Create append by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: append
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">appendbody object</param>
  virtual RuleDnatAppendOutputJsonObject create_nat_rule_dnat_append_by_id(const std::string &name, const RuleDnatAppendInputJsonObject &value) = 0;
  /// <summary>
  /// Create dnat by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: dnat
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">dnatbody object</param>
  virtual void create_nat_rule_dnat_by_id(const std::string &name, const RuleDnatJsonObject &value) = 0;
  /// <summary>
  /// Create entry by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">entrybody object</param>
  virtual void create_nat_rule_dnat_entry_by_id(const std::string &name, const uint32_t &id, const RuleDnatEntryJsonObject &value) = 0;
  /// <summary>
  /// Create entry by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">entrybody object</param>
  virtual void create_nat_rule_dnat_entry_list_by_id(const std::string &name, const std::vector<RuleDnatEntryJsonObject> &value) = 0;
  /// <summary>
  /// Create masquerade by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: masquerade
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">masqueradebody object</param>
  virtual void create_nat_rule_masquerade_by_id(const std::string &name, const RuleMasqueradeJsonObject &value) = 0;
  /// <summary>
  /// Create disable by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: disable
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual RuleMasqueradeDisableOutputJsonObject create_nat_rule_masquerade_disable_by_id(const std::string &name) = 0;
  /// <summary>
  /// Create enable by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: enable
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual RuleMasqueradeEnableOutputJsonObject create_nat_rule_masquerade_enable_by_id(const std::string &name) = 0;
  /// <summary>
  /// Create append by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: append
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">appendbody object</param>
  virtual RulePortForwardingAppendOutputJsonObject create_nat_rule_port_forwarding_append_by_id(const std::string &name, const RulePortForwardingAppendInputJsonObject &value) = 0;
  /// <summary>
  /// Create port-forwarding by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: port-forwarding
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">port-forwardingbody object</param>
  virtual void create_nat_rule_port_forwarding_by_id(const std::string &name, const RulePortForwardingJsonObject &value) = 0;
  /// <summary>
  /// Create entry by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">entrybody object</param>
  virtual void create_nat_rule_port_forwarding_entry_by_id(const std::string &name, const uint32_t &id, const RulePortForwardingEntryJsonObject &value) = 0;
  /// <summary>
  /// Create entry by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">entrybody object</param>
  virtual void create_nat_rule_port_forwarding_entry_list_by_id(const std::string &name, const std::vector<RulePortForwardingEntryJsonObject> &value) = 0;
  /// <summary>
  /// Create append by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: append
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">appendbody object</param>
  virtual RuleSnatAppendOutputJsonObject create_nat_rule_snat_append_by_id(const std::string &name, const RuleSnatAppendInputJsonObject &value) = 0;
  /// <summary>
  /// Create snat by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: snat
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">snatbody object</param>
  virtual void create_nat_rule_snat_by_id(const std::string &name, const RuleSnatJsonObject &value) = 0;
  /// <summary>
  /// Create entry by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">entrybody object</param>
  virtual void create_nat_rule_snat_entry_by_id(const std::string &name, const uint32_t &id, const RuleSnatEntryJsonObject &value) = 0;
  /// <summary>
  /// Create entry by ID
  /// </summary>
  /// <remarks>
  /// Create operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">entrybody object</param>
  virtual void create_nat_rule_snat_entry_list_by_id(const std::string &name, const std::vector<RuleSnatEntryJsonObject> &value) = 0;
  /// <summary>
  /// Delete nat by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: nat
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_nat_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete natting-table by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: natting-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="internalSrc">ID of internal-src</param>
  /// <param name="internalDst">ID of internal-dst</param>
  /// <param name="internalSport">ID of internal-sport</param>
  /// <param name="internalDport">ID of internal-dport</param>
  /// <param name="proto">ID of proto</param>
  virtual void delete_nat_natting_table_by_id(const std::string &name, const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto) = 0;
  /// <summary>
  /// Delete natting-table by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: natting-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_nat_natting_table_list_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete rule by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_nat_rule_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete dnat by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: dnat
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_nat_rule_dnat_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete entry by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual void delete_nat_rule_dnat_entry_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Delete entry by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_nat_rule_dnat_entry_list_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete masquerade by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: masquerade
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_nat_rule_masquerade_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete port-forwarding by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: port-forwarding
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_nat_rule_port_forwarding_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete entry by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual void delete_nat_rule_port_forwarding_entry_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Delete entry by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_nat_rule_port_forwarding_entry_list_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete snat by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: snat
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_nat_rule_snat_by_id(const std::string &name) = 0;
  /// <summary>
  /// Delete entry by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual void delete_nat_rule_snat_entry_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Delete entry by ID
  /// </summary>
  /// <remarks>
  /// Delete operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual void delete_nat_rule_snat_entry_list_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read nat by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: nat
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual NatJsonObject read_nat_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read nat by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: nat
  /// </remarks>
  virtual std::vector<NatJsonObject> read_nat_list_by_id() = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_nat_list_by_id_get_list() = 0;
  /// <summary>
  /// Read loglevel by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: loglevel
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual NatLoglevelEnum read_nat_loglevel_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read natting-table by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: natting-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="internalSrc">ID of internal-src</param>
  /// <param name="internalDst">ID of internal-dst</param>
  /// <param name="internalSport">ID of internal-sport</param>
  /// <param name="internalDport">ID of internal-dport</param>
  /// <param name="proto">ID of proto</param>
  virtual NattingTableJsonObject read_nat_natting_table_by_id(const std::string &name, const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto) = 0;
  /// <summary>
  /// Read external-ip by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: external-ip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="internalSrc">ID of internal-src</param>
  /// <param name="internalDst">ID of internal-dst</param>
  /// <param name="internalSport">ID of internal-sport</param>
  /// <param name="internalDport">ID of internal-dport</param>
  /// <param name="proto">ID of proto</param>
  virtual std::string read_nat_natting_table_external_ip_by_id(const std::string &name, const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto) = 0;
  /// <summary>
  /// Read external-port by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: external-port
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="internalSrc">ID of internal-src</param>
  /// <param name="internalDst">ID of internal-dst</param>
  /// <param name="internalSport">ID of internal-sport</param>
  /// <param name="internalDport">ID of internal-dport</param>
  /// <param name="proto">ID of proto</param>
  virtual uint16_t read_nat_natting_table_external_port_by_id(const std::string &name, const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto) = 0;
  /// <summary>
  /// Read natting-table by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: natting-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::vector<NattingTableJsonObject> read_nat_natting_table_list_by_id(const std::string &name) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_nat_natting_table_list_by_id_get_list(const std::string &name) = 0;
  /// <summary>
  /// Read originating-rule by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: originating-rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="internalSrc">ID of internal-src</param>
  /// <param name="internalDst">ID of internal-dst</param>
  /// <param name="internalSport">ID of internal-sport</param>
  /// <param name="internalDport">ID of internal-dport</param>
  /// <param name="proto">ID of proto</param>
  virtual NattingTableOriginatingRuleEnum read_nat_natting_table_originating_rule_by_id(const std::string &name, const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto) = 0;
  /// <summary>
  /// Read rule by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual RuleJsonObject read_nat_rule_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read dnat by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: dnat
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual RuleDnatJsonObject read_nat_rule_dnat_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read entry by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual RuleDnatEntryJsonObject read_nat_rule_dnat_entry_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read external-ip by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: external-ip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_nat_rule_dnat_entry_external_ip_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read internal-ip by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: internal-ip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_nat_rule_dnat_entry_internal_ip_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read entry by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::vector<RuleDnatEntryJsonObject> read_nat_rule_dnat_entry_list_by_id(const std::string &name) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_nat_rule_dnat_entry_list_by_id_get_list(const std::string &name) = 0;
  /// <summary>
  /// Read masquerade by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: masquerade
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual RuleMasqueradeJsonObject read_nat_rule_masquerade_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read enabled by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: enabled
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual bool read_nat_rule_masquerade_enabled_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read port-forwarding by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: port-forwarding
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual RulePortForwardingJsonObject read_nat_rule_port_forwarding_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read entry by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual RulePortForwardingEntryJsonObject read_nat_rule_port_forwarding_entry_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read external-ip by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: external-ip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_nat_rule_port_forwarding_entry_external_ip_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read external-port by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: external-port
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual uint16_t read_nat_rule_port_forwarding_entry_external_port_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read internal-ip by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: internal-ip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_nat_rule_port_forwarding_entry_internal_ip_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read internal-port by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: internal-port
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual uint16_t read_nat_rule_port_forwarding_entry_internal_port_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read entry by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::vector<RulePortForwardingEntryJsonObject> read_nat_rule_port_forwarding_entry_list_by_id(const std::string &name) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_nat_rule_port_forwarding_entry_list_by_id_get_list(const std::string &name) = 0;
  /// <summary>
  /// Read proto by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: proto
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_nat_rule_port_forwarding_entry_proto_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read snat by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: snat
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual RuleSnatJsonObject read_nat_rule_snat_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read entry by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual RuleSnatEntryJsonObject read_nat_rule_snat_entry_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read external-ip by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: external-ip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_nat_rule_snat_entry_external_ip_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read internal-net by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: internal-net
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  virtual std::string read_nat_rule_snat_entry_internal_net_by_id(const std::string &name, const uint32_t &id) = 0;
  /// <summary>
  /// Read entry by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::vector<RuleSnatEntryJsonObject> read_nat_rule_snat_entry_list_by_id(const std::string &name) = 0;
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> read_nat_rule_snat_entry_list_by_id_get_list(const std::string &name) = 0;
  /// <summary>
  /// Read type by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: type
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual CubeType read_nat_type_by_id(const std::string &name) = 0;
  /// <summary>
  /// Read uuid by ID
  /// </summary>
  /// <remarks>
  /// Read operation of resource: uuid
  /// </remarks>
  /// <param name="name">ID of name</param>
  virtual std::string read_nat_uuid_by_id(const std::string &name) = 0;
  /// <summary>
  /// Replace nat by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: nat
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">natbody object</param>
  virtual void replace_nat_by_id(const std::string &name, const NatJsonObject &value) = 0;
  /// <summary>
  /// Replace natting-table by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: natting-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="internalSrc">ID of internal-src</param>
  /// <param name="internalDst">ID of internal-dst</param>
  /// <param name="internalSport">ID of internal-sport</param>
  /// <param name="internalDport">ID of internal-dport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">natting-tablebody object</param>
  virtual void replace_nat_natting_table_by_id(const std::string &name, const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const NattingTableJsonObject &value) = 0;
  /// <summary>
  /// Replace natting-table by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: natting-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">natting-tablebody object</param>
  virtual void replace_nat_natting_table_list_by_id(const std::string &name, const std::vector<NattingTableJsonObject> &value) = 0;
  /// <summary>
  /// Replace rule by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">rulebody object</param>
  virtual void replace_nat_rule_by_id(const std::string &name, const RuleJsonObject &value) = 0;
  /// <summary>
  /// Replace dnat by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: dnat
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">dnatbody object</param>
  virtual void replace_nat_rule_dnat_by_id(const std::string &name, const RuleDnatJsonObject &value) = 0;
  /// <summary>
  /// Replace entry by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">entrybody object</param>
  virtual void replace_nat_rule_dnat_entry_by_id(const std::string &name, const uint32_t &id, const RuleDnatEntryJsonObject &value) = 0;
  /// <summary>
  /// Replace entry by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">entrybody object</param>
  virtual void replace_nat_rule_dnat_entry_list_by_id(const std::string &name, const std::vector<RuleDnatEntryJsonObject> &value) = 0;
  /// <summary>
  /// Replace masquerade by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: masquerade
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">masqueradebody object</param>
  virtual void replace_nat_rule_masquerade_by_id(const std::string &name, const RuleMasqueradeJsonObject &value) = 0;
  /// <summary>
  /// Replace port-forwarding by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: port-forwarding
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">port-forwardingbody object</param>
  virtual void replace_nat_rule_port_forwarding_by_id(const std::string &name, const RulePortForwardingJsonObject &value) = 0;
  /// <summary>
  /// Replace entry by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">entrybody object</param>
  virtual void replace_nat_rule_port_forwarding_entry_by_id(const std::string &name, const uint32_t &id, const RulePortForwardingEntryJsonObject &value) = 0;
  /// <summary>
  /// Replace entry by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">entrybody object</param>
  virtual void replace_nat_rule_port_forwarding_entry_list_by_id(const std::string &name, const std::vector<RulePortForwardingEntryJsonObject> &value) = 0;
  /// <summary>
  /// Replace snat by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: snat
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">snatbody object</param>
  virtual void replace_nat_rule_snat_by_id(const std::string &name, const RuleSnatJsonObject &value) = 0;
  /// <summary>
  /// Replace entry by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">entrybody object</param>
  virtual void replace_nat_rule_snat_entry_by_id(const std::string &name, const uint32_t &id, const RuleSnatEntryJsonObject &value) = 0;
  /// <summary>
  /// Replace entry by ID
  /// </summary>
  /// <remarks>
  /// Replace operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">entrybody object</param>
  virtual void replace_nat_rule_snat_entry_list_by_id(const std::string &name, const std::vector<RuleSnatEntryJsonObject> &value) = 0;
  /// <summary>
  /// Update nat by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: nat
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">natbody object</param>
  virtual void update_nat_by_id(const std::string &name, const NatJsonObject &value) = 0;
  /// <summary>
  /// Update nat by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: nat
  /// </remarks>
  /// <param name="value">natbody object</param>
  virtual void update_nat_list_by_id(const std::vector<NatJsonObject> &value) = 0;
  /// <summary>
  /// Update loglevel by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: loglevel
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)</param>
  virtual void update_nat_loglevel_by_id(const std::string &name, const NatLoglevelEnum &value) = 0;
  /// <summary>
  /// Update natting-table by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: natting-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="internalSrc">ID of internal-src</param>
  /// <param name="internalDst">ID of internal-dst</param>
  /// <param name="internalSport">ID of internal-sport</param>
  /// <param name="internalDport">ID of internal-dport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">natting-tablebody object</param>
  virtual void update_nat_natting_table_by_id(const std::string &name, const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const NattingTableJsonObject &value) = 0;
  /// <summary>
  /// Update external-ip by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: external-ip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="internalSrc">ID of internal-src</param>
  /// <param name="internalDst">ID of internal-dst</param>
  /// <param name="internalSport">ID of internal-sport</param>
  /// <param name="internalDport">ID of internal-dport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">Translated IP address</param>
  virtual void update_nat_natting_table_external_ip_by_id(const std::string &name, const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const std::string &value) = 0;
  /// <summary>
  /// Update external-port by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: external-port
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="internalSrc">ID of internal-src</param>
  /// <param name="internalDst">ID of internal-dst</param>
  /// <param name="internalSport">ID of internal-sport</param>
  /// <param name="internalDport">ID of internal-dport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">Translated L4 port number</param>
  virtual void update_nat_natting_table_external_port_by_id(const std::string &name, const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const uint16_t &value) = 0;
  /// <summary>
  /// Update natting-table by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: natting-table
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">natting-tablebody object</param>
  virtual void update_nat_natting_table_list_by_id(const std::string &name, const std::vector<NattingTableJsonObject> &value) = 0;
  /// <summary>
  /// Update originating-rule by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: originating-rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="internalSrc">ID of internal-src</param>
  /// <param name="internalDst">ID of internal-dst</param>
  /// <param name="internalSport">ID of internal-sport</param>
  /// <param name="internalDport">ID of internal-dport</param>
  /// <param name="proto">ID of proto</param>
  /// <param name="value">The set of rules that created this mapping</param>
  virtual void update_nat_natting_table_originating_rule_by_id(const std::string &name, const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const NattingTableOriginatingRuleEnum &value) = 0;
  /// <summary>
  /// Update rule by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: rule
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">rulebody object</param>
  virtual void update_nat_rule_by_id(const std::string &name, const RuleJsonObject &value) = 0;
  /// <summary>
  /// Update dnat by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: dnat
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">dnatbody object</param>
  virtual void update_nat_rule_dnat_by_id(const std::string &name, const RuleDnatJsonObject &value) = 0;
  /// <summary>
  /// Update entry by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">entrybody object</param>
  virtual void update_nat_rule_dnat_entry_by_id(const std::string &name, const uint32_t &id, const RuleDnatEntryJsonObject &value) = 0;
  /// <summary>
  /// Update external-ip by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: external-ip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">External destination IP address</param>
  virtual void update_nat_rule_dnat_entry_external_ip_by_id(const std::string &name, const uint32_t &id, const std::string &value) = 0;
  /// <summary>
  /// Update internal-ip by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: internal-ip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">Internal destination IP address</param>
  virtual void update_nat_rule_dnat_entry_internal_ip_by_id(const std::string &name, const uint32_t &id, const std::string &value) = 0;
  /// <summary>
  /// Update entry by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">entrybody object</param>
  virtual void update_nat_rule_dnat_entry_list_by_id(const std::string &name, const std::vector<RuleDnatEntryJsonObject> &value) = 0;
  /// <summary>
  /// Update masquerade by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: masquerade
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">masqueradebody object</param>
  virtual void update_nat_rule_masquerade_by_id(const std::string &name, const RuleMasqueradeJsonObject &value) = 0;
  /// <summary>
  /// Update enabled by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: enabled
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">enabledbody object</param>
  virtual void update_nat_rule_masquerade_enabled_by_id(const std::string &name, const bool &value) = 0;
  /// <summary>
  /// Update port-forwarding by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: port-forwarding
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">port-forwardingbody object</param>
  virtual void update_nat_rule_port_forwarding_by_id(const std::string &name, const RulePortForwardingJsonObject &value) = 0;
  /// <summary>
  /// Update entry by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">entrybody object</param>
  virtual void update_nat_rule_port_forwarding_entry_by_id(const std::string &name, const uint32_t &id, const RulePortForwardingEntryJsonObject &value) = 0;
  /// <summary>
  /// Update external-ip by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: external-ip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">External destination IP address</param>
  virtual void update_nat_rule_port_forwarding_entry_external_ip_by_id(const std::string &name, const uint32_t &id, const std::string &value) = 0;
  /// <summary>
  /// Update external-port by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: external-port
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">External destination L4 port</param>
  virtual void update_nat_rule_port_forwarding_entry_external_port_by_id(const std::string &name, const uint32_t &id, const uint16_t &value) = 0;
  /// <summary>
  /// Update internal-ip by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: internal-ip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">Internal destination IP address</param>
  virtual void update_nat_rule_port_forwarding_entry_internal_ip_by_id(const std::string &name, const uint32_t &id, const std::string &value) = 0;
  /// <summary>
  /// Update internal-port by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: internal-port
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">Internal destination L4 port</param>
  virtual void update_nat_rule_port_forwarding_entry_internal_port_by_id(const std::string &name, const uint32_t &id, const uint16_t &value) = 0;
  /// <summary>
  /// Update entry by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">entrybody object</param>
  virtual void update_nat_rule_port_forwarding_entry_list_by_id(const std::string &name, const std::vector<RulePortForwardingEntryJsonObject> &value) = 0;
  /// <summary>
  /// Update proto by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: proto
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">L4 protocol (TCP, UDP, ALL)</param>
  virtual void update_nat_rule_port_forwarding_entry_proto_by_id(const std::string &name, const uint32_t &id, const std::string &value) = 0;
  /// <summary>
  /// Update snat by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: snat
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">snatbody object</param>
  virtual void update_nat_rule_snat_by_id(const std::string &name, const RuleSnatJsonObject &value) = 0;
  /// <summary>
  /// Update entry by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">entrybody object</param>
  virtual void update_nat_rule_snat_entry_by_id(const std::string &name, const uint32_t &id, const RuleSnatEntryJsonObject &value) = 0;
  /// <summary>
  /// Update external-ip by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: external-ip
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">Natted source IP address</param>
  virtual void update_nat_rule_snat_entry_external_ip_by_id(const std::string &name, const uint32_t &id, const std::string &value) = 0;
  /// <summary>
  /// Update internal-net by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: internal-net
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="id">ID of id</param>
  /// <param name="value">Internal IP address (or subnet)</param>
  virtual void update_nat_rule_snat_entry_internal_net_by_id(const std::string &name, const uint32_t &id, const std::string &value) = 0;
  /// <summary>
  /// Update entry by ID
  /// </summary>
  /// <remarks>
  /// Update operation of resource: entry
  /// </remarks>
  /// <param name="name">ID of name</param>
  /// <param name="value">entrybody object</param>
  virtual void update_nat_rule_snat_entry_list_by_id(const std::string &name, const std::vector<RuleSnatEntryJsonObject> &value) = 0;
};

}
}
}
}

