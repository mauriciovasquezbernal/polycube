/**
* nat API
* NAT Service
*
* OpenAPI spec version: 1.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


// These methods have a default implementation. Your are free to keep it or add your own


#include "../Nat.h"




std::string Nat::getName(){
  // This method retrieves the name value.
  return get_name();
}


std::string Nat::getUuid(){
  // This method retrieves the uuid value.
  return get_uuid().str();
}


CubeType Nat::getType(){
  // This method retrieves the type value.
  return get_type();
}


NatLoglevelEnum Nat::getLoglevel(){
  // This method retrieves the loglevel value.
    switch(get_log_level()){
      case polycube::LogLevel::TRACE:
        return NatLoglevelEnum::TRACE;
      case polycube::LogLevel::DEBUG:
        return NatLoglevelEnum::DEBUG;
      case polycube::LogLevel::INFO:
        return NatLoglevelEnum::INFO;
      case polycube::LogLevel::WARN:
        return NatLoglevelEnum::WARN;
      case polycube::LogLevel::ERR:
        return NatLoglevelEnum::ERR;
      case polycube::LogLevel::CRITICAL:
        return NatLoglevelEnum::CRITICAL;
      case polycube::LogLevel::OFF:
        return NatLoglevelEnum::OFF;
    }
}

void Nat::setLoglevel(const NatLoglevelEnum &value){
  // This method sets the loglevel value.
    switch(value){
      case NatLoglevelEnum::TRACE:
        set_log_level(polycube::LogLevel::TRACE);
        break;
      case NatLoglevelEnum::DEBUG:
        set_log_level(polycube::LogLevel::DEBUG);
        break;
      case NatLoglevelEnum::INFO:
        set_log_level(polycube::LogLevel::INFO);
        break;
      case NatLoglevelEnum::WARN:
        set_log_level(polycube::LogLevel::WARN);
        break;
      case NatLoglevelEnum::ERR:
        set_log_level(polycube::LogLevel::ERR);
        break;
      case NatLoglevelEnum::CRITICAL:
        set_log_level(polycube::LogLevel::CRITICAL);
        break;
      case NatLoglevelEnum::OFF:
        set_log_level(polycube::LogLevel::OFF);
        break;
    }
}

std::shared_ptr<Rule> Nat::getRule(){
  return Rule::getEntry(*this);
}

void Nat::addRule(const RuleJsonObject &value){
  Rule::create(*this, value);
}

void Nat::replaceRule(const RuleJsonObject &conf){
  Rule::removeEntry(*this);
  Rule::create(*this, conf);
}

void Nat::delRule(){
  Rule::removeEntry(*this);
}


std::shared_ptr<NattingTable> Nat::getNattingTable(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto){
  return NattingTable::getEntry(*this, internalSrc, internalDst, internalSport, internalDport, proto);
}

std::vector<std::shared_ptr<NattingTable>> Nat::getNattingTableList(){
  return NattingTable::get(*this);
}

void Nat::addNattingTable(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const NattingTableJsonObject &conf){
  NattingTable::create(*this, internalSrc, internalDst, internalSport, internalDport, proto, conf);
}

void Nat::addNattingTableList(const std::vector<NattingTableJsonObject> &conf){
  for(auto &i : conf){
    std::string internalSrc_ = i.getInternalSrc();
    std::string internalDst_ = i.getInternalDst();
    uint16_t internalSport_ = i.getInternalSport();
    uint16_t internalDport_ = i.getInternalDport();
    std::string proto_ = i.getProto();
    NattingTable::create(*this, internalSrc_, internalDst_, internalSport_, internalDport_, proto_,  i);
  }
}

void Nat::replaceNattingTable(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const NattingTableJsonObject &conf){
  NattingTable::removeEntry(*this, internalSrc, internalDst, internalSport, internalDport, proto);
  std::string internalSrc_ = conf.getInternalSrc();
  std::string internalDst_ = conf.getInternalDst();
  uint16_t internalSport_ = conf.getInternalSport();
  uint16_t internalDport_ = conf.getInternalDport();
  std::string proto_ = conf.getProto();
  NattingTable::create(*this, internalSrc_, internalDst_, internalSport_, internalDport_, proto_, conf);

}

void Nat::delNattingTable(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto){
  NattingTable::removeEntry(*this, internalSrc, internalDst, internalSport, internalDport, proto);
}

void Nat::delNattingTableList(){
  NattingTable::remove(*this);
}



