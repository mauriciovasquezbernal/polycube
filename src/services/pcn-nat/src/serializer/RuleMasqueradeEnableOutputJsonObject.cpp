/**
* nat API
* NAT Service
*
* OpenAPI spec version: 1.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "RuleMasqueradeEnableOutputJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

RuleMasqueradeEnableOutputJsonObject::RuleMasqueradeEnableOutputJsonObject() :
  m_resultIsSet (false) { }

RuleMasqueradeEnableOutputJsonObject::RuleMasqueradeEnableOutputJsonObject(nlohmann::json& val) :
  m_resultIsSet (false) {
  if (val.count("result") != 0) {
    setResult(val.at("result").get<bool>());
  }
}

nlohmann::json RuleMasqueradeEnableOutputJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  if (m_resultIsSet) {
    val["result"] = m_result;
  }


  return val;
}

nlohmann::json RuleMasqueradeEnableOutputJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

nlohmann::json RuleMasqueradeEnableOutputJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["result"]["name"] = "result";
  val["result"]["type"] = "leaf"; // Suppose that type is leaf
  val["result"]["simpletype"] = "boolean";
  val["result"]["description"] = R"POLYCUBE(True if the operation is successful)POLYCUBE";
  val["result"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json RuleMasqueradeEnableOutputJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["result"]["name"] = "result";
  val["result"]["simpletype"] = "boolean";
  val["result"]["description"] = R"POLYCUBE(True if the operation is successful)POLYCUBE";
  val["result"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json RuleMasqueradeEnableOutputJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> RuleMasqueradeEnableOutputJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

bool RuleMasqueradeEnableOutputJsonObject::getResult() const {
  return m_result;
}

void RuleMasqueradeEnableOutputJsonObject::setResult(bool value) {
  m_result = value;
  m_resultIsSet = true;
}

bool RuleMasqueradeEnableOutputJsonObject::resultIsSet() const {
  return m_resultIsSet;
}

void RuleMasqueradeEnableOutputJsonObject::unsetResult() {
  m_resultIsSet = false;
}




}
}
}
}


