/**
* nat API
* nat API generated from nat.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "NatJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

NatJsonObject::NatJsonObject() {
  m_nameIsSet = false;
  m_ruleIsSet = false;
  m_nattingTableIsSet = false;
}

NatJsonObject::NatJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_ruleIsSet = false;
  m_nattingTableIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("rule")) {
    if (!val["rule"].is_null()) {
      RuleJsonObject newItem { val["rule"] };
      setRule(newItem);
    }
  }

  if (val.count("natting-table")) {
    for (auto& item : val["natting-table"]) {
      NattingTableJsonObject newItem{ item };
      m_nattingTable.push_back(newItem);
    }

    m_nattingTableIsSet = true;
  }
}

nlohmann::json NatJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_ruleIsSet) {
    val["rule"] = JsonObjectBase::toJson(m_rule);
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_nattingTable) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["natting-table"] = jsonArray;
    }
  }

  return val;
}

std::string NatJsonObject::getName() const {
  return m_name;
}

void NatJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool NatJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



RuleJsonObject NatJsonObject::getRule() const {
  return m_rule;
}

void NatJsonObject::setRule(RuleJsonObject value) {
  m_rule = value;
  m_ruleIsSet = true;
}

bool NatJsonObject::ruleIsSet() const {
  return m_ruleIsSet;
}

void NatJsonObject::unsetRule() {
  m_ruleIsSet = false;
}

const std::vector<NattingTableJsonObject>& NatJsonObject::getNattingTable() const{
  return m_nattingTable;
}

void NatJsonObject::addNattingTable(NattingTableJsonObject value) {
  m_nattingTable.push_back(value);
  m_nattingTableIsSet = true;
}


bool NatJsonObject::nattingTableIsSet() const {
  return m_nattingTableIsSet;
}

void NatJsonObject::unsetNattingTable() {
  m_nattingTableIsSet = false;
}


nlohmann::json NatJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["name"]["name"] = "name";
  val["name"]["type"] = "key";
  val["name"]["simpletype"] = "string";
  val["name"]["description"] = R"POLYCUBE(Name of the nat service)POLYCUBE";
  val["name"]["example"] = R"POLYCUBE(nat1)POLYCUBE";

  return val;
}

nlohmann::json NatJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["uuid"]["name"] = "uuid";
  val["uuid"]["type"] = "leaf"; // Suppose that type is leaf
  val["uuid"]["simpletype"] = "string";
  val["uuid"]["description"] = R"POLYCUBE(UUID of the Cube)POLYCUBE";
  val["uuid"]["example"] = R"POLYCUBE()POLYCUBE";
  val["type"]["name"] = "type";
  val["type"]["type"] = "leaf"; // Suppose that type is leaf
  val["type"]["simpletype"] = "string";
  val["type"]["description"] = R"POLYCUBE(Type of the Cube (TC, XDP_SKB, XDP_DRV))POLYCUBE";
  val["type"]["example"] = R"POLYCUBE(TC)POLYCUBE";
  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["type"] = "leaf"; // Suppose that type is leaf
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";
  val["rule"]["name"] = "rule";
  val["rule"]["type"] = "leaf"; // Suppose that type is leaf
  val["rule"]["description"] = R"POLYCUBE()POLYCUBE";
  val["rule"]["example"] = R"POLYCUBE()POLYCUBE";
  val["natting-table"]["name"] = "natting-table";
  val["natting-table"]["type"] = "leaf"; // Suppose that type is leaf
  val["natting-table"]["type"] = "list";
  val["natting-table"]["description"] = R"POLYCUBE()POLYCUBE";
  val["natting-table"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json NatJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";

  return val;
}

nlohmann::json NatJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();

  val["rule"]["name"] = "rule";
  val["rule"]["type"] = "complex";
  val["rule"]["description"] = R"POLYCUBE()POLYCUBE";
  val["rule"]["example"] = R"POLYCUBE()POLYCUBE";
  val["natting-table"]["name"] = "natting-table";
  val["natting-table"]["type"] = "list";
  val["natting-table"]["description"] = R"POLYCUBE()POLYCUBE";
  val["natting-table"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

std::vector<std::string> NatJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

}
}
}
}

