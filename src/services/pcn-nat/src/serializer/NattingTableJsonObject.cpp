/**
* nat API
* NAT Service
*
* OpenAPI spec version: 1.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "NattingTableJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

NattingTableJsonObject::NattingTableJsonObject() :
  m_internalSrcIsSet (false),
  m_internalDstIsSet (false),
  m_internalSportIsSet (false),
  m_internalDportIsSet (false),
  m_protoIsSet (false),
  m_originatingRuleIsSet (false),
  m_externalIpIsSet (false),
  m_externalPortIsSet (false) { }

NattingTableJsonObject::NattingTableJsonObject(nlohmann::json& val) :
  m_internalSrcIsSet (false),
  m_internalDstIsSet (false),
  m_internalSportIsSet (false),
  m_internalDportIsSet (false),
  m_protoIsSet (false),
  m_originatingRuleIsSet (false),
  m_externalIpIsSet (false),
  m_externalPortIsSet (false) {





  if (val.count("originating-rule") != 0) {
    setOriginatingRule(string_to_NattingTableOriginatingRuleEnum(val.at("originating-rule").get<std::string>()));
  }

  if (val.count("external-ip") != 0) {
    setExternalIp(val.at("external-ip").get<std::string>());
  }

  if (val.count("external-port") != 0) {
    setExternalPort(val.at("external-port").get<uint16_t>());
  }
}

nlohmann::json NattingTableJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  val["internal-src"] = m_internalSrc;
  val["internal-dst"] = m_internalDst;
  val["internal-sport"] = m_internalSport;
  val["internal-dport"] = m_internalDport;
  val["proto"] = m_proto;
  if (m_originatingRuleIsSet) {
    val["originating-rule"] = NattingTableOriginatingRuleEnum_to_string(m_originatingRule);
  }

  if (m_externalIpIsSet) {
    val["external-ip"] = m_externalIp;
  }

  if (m_externalPortIsSet) {
    val["external-port"] = m_externalPort;
  }


  return val;
}

nlohmann::json NattingTableJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["internal-src"]["name"] = "internal-src";
  val["internal-src"]["type"] = "key";
  val["internal-src"]["simpletype"] = "string";
  val["internal-src"]["description"] = R"POLYCUBE(Source IP address)POLYCUBE";
  val["internal-src"]["example"] = R"POLYCUBE()POLYCUBE";
  val["internal-dst"]["name"] = "internal-dst";
  val["internal-dst"]["type"] = "key";
  val["internal-dst"]["simpletype"] = "string";
  val["internal-dst"]["description"] = R"POLYCUBE(Destination IP address)POLYCUBE";
  val["internal-dst"]["example"] = R"POLYCUBE()POLYCUBE";
  val["internal-sport"]["name"] = "internal-sport";
  val["internal-sport"]["type"] = "key";
  val["internal-sport"]["simpletype"] = "integer";
  val["internal-sport"]["description"] = R"POLYCUBE(Source L4 port number)POLYCUBE";
  val["internal-sport"]["example"] = R"POLYCUBE()POLYCUBE";
  val["internal-dport"]["name"] = "internal-dport";
  val["internal-dport"]["type"] = "key";
  val["internal-dport"]["simpletype"] = "integer";
  val["internal-dport"]["description"] = R"POLYCUBE(Destination L4 port number)POLYCUBE";
  val["internal-dport"]["example"] = R"POLYCUBE()POLYCUBE";
  val["proto"]["name"] = "proto";
  val["proto"]["type"] = "key";
  val["proto"]["simpletype"] = "string";
  val["proto"]["description"] = R"POLYCUBE(L4 protocol)POLYCUBE";
  val["proto"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json NattingTableJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["originating-rule"]["name"] = "originating-rule";
  val["originating-rule"]["type"] = "leaf"; // Suppose that type is leaf
  val["originating-rule"]["simpletype"] = "string";
  val["originating-rule"]["description"] = R"POLYCUBE(The set of rules that created this mapping)POLYCUBE";
  val["originating-rule"]["example"] = R"POLYCUBE()POLYCUBE";
  val["external-ip"]["name"] = "external-ip";
  val["external-ip"]["type"] = "leaf"; // Suppose that type is leaf
  val["external-ip"]["simpletype"] = "string";
  val["external-ip"]["description"] = R"POLYCUBE(Translated IP address)POLYCUBE";
  val["external-ip"]["example"] = R"POLYCUBE()POLYCUBE";
  val["external-port"]["name"] = "external-port";
  val["external-port"]["type"] = "leaf"; // Suppose that type is leaf
  val["external-port"]["simpletype"] = "integer";
  val["external-port"]["description"] = R"POLYCUBE(Translated L4 port number)POLYCUBE";
  val["external-port"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json NattingTableJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["originating-rule"]["name"] = "originating-rule";
  val["originating-rule"]["simpletype"] = "string";
  val["originating-rule"]["description"] = R"POLYCUBE(The set of rules that created this mapping)POLYCUBE";
  val["originating-rule"]["example"] = R"POLYCUBE()POLYCUBE";
  val["external-ip"]["name"] = "external-ip";
  val["external-ip"]["simpletype"] = "string";
  val["external-ip"]["description"] = R"POLYCUBE(Translated IP address)POLYCUBE";
  val["external-ip"]["example"] = R"POLYCUBE()POLYCUBE";
  val["external-port"]["name"] = "external-port";
  val["external-port"]["simpletype"] = "integer";
  val["external-port"]["description"] = R"POLYCUBE(Translated L4 port number)POLYCUBE";
  val["external-port"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json NattingTableJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> NattingTableJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

std::string NattingTableJsonObject::getInternalSrc() const {
  return m_internalSrc;
}

void NattingTableJsonObject::setInternalSrc(std::string value) {
  m_internalSrc = value;
  m_internalSrcIsSet = true;
}

bool NattingTableJsonObject::internalSrcIsSet() const {
  return m_internalSrcIsSet;
}





std::string NattingTableJsonObject::getInternalDst() const {
  return m_internalDst;
}

void NattingTableJsonObject::setInternalDst(std::string value) {
  m_internalDst = value;
  m_internalDstIsSet = true;
}

bool NattingTableJsonObject::internalDstIsSet() const {
  return m_internalDstIsSet;
}





uint16_t NattingTableJsonObject::getInternalSport() const {
  return m_internalSport;
}

void NattingTableJsonObject::setInternalSport(uint16_t value) {
  m_internalSport = value;
  m_internalSportIsSet = true;
}

bool NattingTableJsonObject::internalSportIsSet() const {
  return m_internalSportIsSet;
}





uint16_t NattingTableJsonObject::getInternalDport() const {
  return m_internalDport;
}

void NattingTableJsonObject::setInternalDport(uint16_t value) {
  m_internalDport = value;
  m_internalDportIsSet = true;
}

bool NattingTableJsonObject::internalDportIsSet() const {
  return m_internalDportIsSet;
}





std::string NattingTableJsonObject::getProto() const {
  return m_proto;
}

void NattingTableJsonObject::setProto(std::string value) {
  m_proto = value;
  m_protoIsSet = true;
}

bool NattingTableJsonObject::protoIsSet() const {
  return m_protoIsSet;
}





NattingTableOriginatingRuleEnum NattingTableJsonObject::getOriginatingRule() const {
  return m_originatingRule;
}

void NattingTableJsonObject::setOriginatingRule(NattingTableOriginatingRuleEnum value) {
  m_originatingRule = value;
  m_originatingRuleIsSet = true;
}

bool NattingTableJsonObject::originatingRuleIsSet() const {
  return m_originatingRuleIsSet;
}

void NattingTableJsonObject::unsetOriginatingRule() {
  m_originatingRuleIsSet = false;
}

std::string NattingTableJsonObject::NattingTableOriginatingRuleEnum_to_string(const NattingTableOriginatingRuleEnum &value){
  switch(value){
    case NattingTableOriginatingRuleEnum::SNAT:
      return std::string("snat");
    case NattingTableOriginatingRuleEnum::DNAT:
      return std::string("dnat");
    case NattingTableOriginatingRuleEnum::MASQUERADE:
      return std::string("masquerade");
    case NattingTableOriginatingRuleEnum::PORTFORWARDING:
      return std::string("portforwarding");
    default:
      throw std::runtime_error("Bad NattingTable originatingRule");
  }
}

NattingTableOriginatingRuleEnum NattingTableJsonObject::string_to_NattingTableOriginatingRuleEnum(const std::string &str){
  if (JsonObjectBase::iequals("snat", str))
    return NattingTableOriginatingRuleEnum::SNAT;
  if (JsonObjectBase::iequals("dnat", str))
    return NattingTableOriginatingRuleEnum::DNAT;
  if (JsonObjectBase::iequals("masquerade", str))
    return NattingTableOriginatingRuleEnum::MASQUERADE;
  if (JsonObjectBase::iequals("portforwarding", str))
    return NattingTableOriginatingRuleEnum::PORTFORWARDING;
  throw std::runtime_error("NattingTable originatingRule is invalid");
}


std::string NattingTableJsonObject::getExternalIp() const {
  return m_externalIp;
}

void NattingTableJsonObject::setExternalIp(std::string value) {
  m_externalIp = value;
  m_externalIpIsSet = true;
}

bool NattingTableJsonObject::externalIpIsSet() const {
  return m_externalIpIsSet;
}

void NattingTableJsonObject::unsetExternalIp() {
  m_externalIpIsSet = false;
}



uint16_t NattingTableJsonObject::getExternalPort() const {
  return m_externalPort;
}

void NattingTableJsonObject::setExternalPort(uint16_t value) {
  m_externalPort = value;
  m_externalPortIsSet = true;
}

bool NattingTableJsonObject::externalPortIsSet() const {
  return m_externalPortIsSet;
}

void NattingTableJsonObject::unsetExternalPort() {
  m_externalPortIsSet = false;
}




}
}
}
}


