/**
* nat API
* NAT Service
*
* OpenAPI spec version: 1.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "RuleSnatEntryJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

RuleSnatEntryJsonObject::RuleSnatEntryJsonObject() :
  m_idIsSet (false),
  m_internalNetIsSet (false),
  m_externalIpIsSet (false) { }

RuleSnatEntryJsonObject::RuleSnatEntryJsonObject(nlohmann::json& val) :
  m_idIsSet (false),
  // Mandatory item
  m_internalNet (val.at("internal-net").get<std::string>()),
  m_internalNetIsSet (true),
  // Mandatory item
  m_externalIp (val.at("external-ip").get<std::string>()),
  m_externalIpIsSet (true) {


}

nlohmann::json RuleSnatEntryJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  val["id"] = m_id;
  val["internal-net"] = m_internalNet;
  val["external-ip"] = m_externalIp;

  return val;
}

nlohmann::json RuleSnatEntryJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["id"]["name"] = "id";
  val["id"]["type"] = "key";
  val["id"]["simpletype"] = "integer";
  val["id"]["description"] = R"POLYCUBE(Rule identifier)POLYCUBE";
  val["id"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json RuleSnatEntryJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["internal-net"]["name"] = "internal-net";
  val["internal-net"]["type"] = "leaf"; // Suppose that type is leaf
  val["internal-net"]["simpletype"] = "string";
  val["internal-net"]["description"] = R"POLYCUBE(Internal IP address (or subnet))POLYCUBE";
  val["internal-net"]["example"] = R"POLYCUBE(10.0.0.0/24 or 10.0.0.1/32)POLYCUBE";
  val["external-ip"]["name"] = "external-ip";
  val["external-ip"]["type"] = "leaf"; // Suppose that type is leaf
  val["external-ip"]["simpletype"] = "string";
  val["external-ip"]["description"] = R"POLYCUBE(Natted source IP address)POLYCUBE";
  val["external-ip"]["example"] = R"POLYCUBE(8.8.8.8)POLYCUBE";

  return val;
}

nlohmann::json RuleSnatEntryJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["internal-net"]["name"] = "internal-net";
  val["internal-net"]["simpletype"] = "string";
  val["internal-net"]["description"] = R"POLYCUBE(Internal IP address (or subnet))POLYCUBE";
  val["internal-net"]["example"] = R"POLYCUBE(10.0.0.0/24 or 10.0.0.1/32)POLYCUBE";
  val["external-ip"]["name"] = "external-ip";
  val["external-ip"]["simpletype"] = "string";
  val["external-ip"]["description"] = R"POLYCUBE(Natted source IP address)POLYCUBE";
  val["external-ip"]["example"] = R"POLYCUBE(8.8.8.8)POLYCUBE";

  return val;
}

nlohmann::json RuleSnatEntryJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> RuleSnatEntryJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

uint32_t RuleSnatEntryJsonObject::getId() const {
  return m_id;
}

void RuleSnatEntryJsonObject::setId(uint32_t value) {
  m_id = value;
  m_idIsSet = true;
}

bool RuleSnatEntryJsonObject::idIsSet() const {
  return m_idIsSet;
}





std::string RuleSnatEntryJsonObject::getInternalNet() const {
  return m_internalNet;
}

void RuleSnatEntryJsonObject::setInternalNet(std::string value) {
  m_internalNet = value;
  m_internalNetIsSet = true;
}

bool RuleSnatEntryJsonObject::internalNetIsSet() const {
  return m_internalNetIsSet;
}





std::string RuleSnatEntryJsonObject::getExternalIp() const {
  return m_externalIp;
}

void RuleSnatEntryJsonObject::setExternalIp(std::string value) {
  m_externalIp = value;
  m_externalIpIsSet = true;
}

bool RuleSnatEntryJsonObject::externalIpIsSet() const {
  return m_externalIpIsSet;
}






}
}
}
}


