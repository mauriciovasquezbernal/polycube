/**
* k8switch API
* Kubernetes HyperSwitch Service
*
* OpenAPI spec version: 2.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "ServiceBackendJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

ServiceBackendJsonObject::ServiceBackendJsonObject() :
  m_nameIsSet (false),
  m_ipIsSet (false),
  m_portIsSet (false),
  m_weightIsSet (false) { }

ServiceBackendJsonObject::ServiceBackendJsonObject(nlohmann::json& val) :
  m_nameIsSet (false),
  m_ipIsSet (false),
  m_portIsSet (false),
  m_weightIsSet (false) {
  if (val.count("name") != 0) {
    setName(val.at("name").get<std::string>());
  }



  if (val.count("weight") != 0) {
    setWeight(val.at("weight").get<uint16_t>());
  }
}

nlohmann::json ServiceBackendJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  val["ip"] = m_ip;
  val["port"] = m_port;
  if (m_weightIsSet) {
    val["weight"] = m_weight;
  }


  return val;
}

nlohmann::json ServiceBackendJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["ip"]["name"] = "ip";
  val["ip"]["type"] = "key";
  val["ip"]["simpletype"] = "string";
  val["ip"]["description"] = R"POLYCUBE(IP address of the backend server of the pool)POLYCUBE";
  val["ip"]["example"] = R"POLYCUBE(10.244.1.23)POLYCUBE";
  val["port"]["name"] = "port";
  val["port"]["type"] = "key";
  val["port"]["simpletype"] = "integer";
  val["port"]["description"] = R"POLYCUBE(Port where the server listen to (this value is ignored in case of ICMP))POLYCUBE";
  val["port"]["example"] = R"POLYCUBE(80)POLYCUBE";

  return val;
}

nlohmann::json ServiceBackendJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["name"]["name"] = "name";
  val["name"]["type"] = "leaf"; // Suppose that type is leaf
  val["name"]["simpletype"] = "string";
  val["name"]["description"] = R"POLYCUBE(name)POLYCUBE";
  val["name"]["example"] = R"POLYCUBE(backend1)POLYCUBE";
  val["weight"]["name"] = "weight";
  val["weight"]["type"] = "leaf"; // Suppose that type is leaf
  val["weight"]["simpletype"] = "integer";
  val["weight"]["description"] = R"POLYCUBE(Weight of the backend in the pool)POLYCUBE";
  val["weight"]["example"] = R"POLYCUBE(1)POLYCUBE";

  return val;
}

nlohmann::json ServiceBackendJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["name"]["name"] = "name";
  val["name"]["simpletype"] = "string";
  val["name"]["description"] = R"POLYCUBE(name)POLYCUBE";
  val["name"]["example"] = R"POLYCUBE(backend1)POLYCUBE";
  val["weight"]["name"] = "weight";
  val["weight"]["simpletype"] = "integer";
  val["weight"]["description"] = R"POLYCUBE(Weight of the backend in the pool)POLYCUBE";
  val["weight"]["example"] = R"POLYCUBE(1)POLYCUBE";

  return val;
}

nlohmann::json ServiceBackendJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> ServiceBackendJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

std::string ServiceBackendJsonObject::getName() const {
  return m_name;
}

void ServiceBackendJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool ServiceBackendJsonObject::nameIsSet() const {
  return m_nameIsSet;
}

void ServiceBackendJsonObject::unsetName() {
  m_nameIsSet = false;
}



std::string ServiceBackendJsonObject::getIp() const {
  return m_ip;
}

void ServiceBackendJsonObject::setIp(std::string value) {
  m_ip = value;
  m_ipIsSet = true;
}

bool ServiceBackendJsonObject::ipIsSet() const {
  return m_ipIsSet;
}





uint16_t ServiceBackendJsonObject::getPort() const {
  return m_port;
}

void ServiceBackendJsonObject::setPort(uint16_t value) {
  m_port = value;
  m_portIsSet = true;
}

bool ServiceBackendJsonObject::portIsSet() const {
  return m_portIsSet;
}





uint16_t ServiceBackendJsonObject::getWeight() const {
  return m_weight;
}

void ServiceBackendJsonObject::setWeight(uint16_t value) {
  m_weight = value;
  m_weightIsSet = true;
}

bool ServiceBackendJsonObject::weightIsSet() const {
  return m_weightIsSet;
}

void ServiceBackendJsonObject::unsetWeight() {
  m_weightIsSet = false;
}




}
}
}
}


